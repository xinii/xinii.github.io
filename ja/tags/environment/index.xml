<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>environment on xin iDEA iNNATA</title>
    <link>https://xinii.github.io/ja/tags/environment/</link>
    <description>Recent content in environment on xin iDEA iNNATA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 03 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://xinii.github.io/ja/tags/environment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FishとEmacsのためのaptリポジトリ追加</title>
      <link>https://xinii.github.io/ja/blog/environment/add-apt-repository-for-fish-and-emacs/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xinii.github.io/ja/blog/environment/add-apt-repository-for-fish-and-emacs/</guid>
      <description>目次  使う予定のコマンド このコマンドがない？以下のようにコマンドを入れる 以下のステップに従ってインストール  リポジトリを登録 リポジトリを更新 必要なものをインストール    使う予定のコマンド add-apt-repository このコマンドがない？以下のようにコマンドを入れる apt install software-properties-common 以下のステップに従ってインストール リポジトリを登録 add-apt-repository ppa:kelleyk/emacs apt-add-repository ppa:fish-shell/release-3 リポジトリを更新 apt update 必要なものをインストール apt install emacs26 apt install fish </description>
    </item>
    
    <item>
      <title>いくつかのssh設定</title>
      <link>https://xinii.github.io/ja/blog/environment/several-ssh-configurations/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://xinii.github.io/ja/blog/environment/several-ssh-configurations/</guid>
      <description>目次  sshの途切れる現象  やり方 その他   アンドロイドのtermuxアプリを使ってsshデーモンを立てる  インストール キーを設定する デバッグモードをデーモンを起動 デーモンを起動 パソコンで立てたデーモンにログイン    sshの途切れる現象   sshを使ってリモートサーバーにログインしている時に，一定の時間内に操作がなければ， Write failed: Broken pipeというエラーが出てきてしまう可能性がある。
  以上のことを避けるために，クライアント側やサーバー側のssh設定を変える必要がある。
  やり方  クライアント側で対処する  以下の内容を/etc/ssh/ssh_configか~/.ssh/configに記述する。
ServerAliveInterval 15 ServerAliveCountMax 10 この設定は，15秒ごとに10回の応答が送信されることを意味する。 それでも応答がなければ接続が切断される。
 サーバー側で対処する  以下の内容を/etc/ssh/sshd_configに記述する。
ClientAliveInterval 30 ClientAliveCountMax 5 この設定は，30秒ごとに5回の応答が送信されることを意味する。 それでも応答がなければ接続が切断される。
その他 sshを使う際にtmuxやscreenなどを使うことがおすすめ。 これで，リモートへの接続が途切れたとしても， リモートに再びログインした後にすでにあるセッションにattachすれば元の環境が戻ってくる。
アンドロイドのtermuxアプリを使ってsshデーモンを立てる インストール apt install openssh キーを設定する ssh-keygen cat ~/.ssh/id_rsa.pub &amp;gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.</description>
    </item>
    
    <item>
      <title>Jetson NanoにOpenCVをインストール</title>
      <link>https://xinii.github.io/ja/blog/environment/install-opencv-on-jetson-nano/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xinii.github.io/ja/blog/environment/install-opencv-on-jetson-nano/</guid>
      <description>目次  swapファイルを生成 インストールのスクリプトを生成 スクリプトを実行する インストールされたOpenCVをテスト  swapファイルを生成 コンパイル途中にメモリー不足などの問題を防ぐため， swapという交換用ファイルを任意のパスに生成しておく。 このファイルは，OS再起動の後に自動的に消えるが， 全てのインストールが終わったら，手作業で交換用ファイルを削除しても良い。
$ fallocate -l 4G swapfile $ chmod 600 swapfile $ mkswap swapfile $ sudo swapon swapfile $ swapon -s インストールのスクリプトを生成 OpenCV 4.0.0をインストールためのリンク
以上は，OpenCV 4.0.0をインストールためのリンクで，ここでは，OpenCV 4.1.0をインストールしたいため， バージョン番号の部分に少し手を加える。
#!/bin/bash # # Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved. # # NVIDIA Corporation and its licensors retain all intellectual property # and proprietary rights in and to this software, related documentation # and any modifications thereto.</description>
    </item>
    
    <item>
      <title>GnutlsをインストールしてソースからEmacsをコンパイル</title>
      <link>https://xinii.github.io/ja/blog/environment/install-gnutls-and-compile-emacs-from-source/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xinii.github.io/ja/blog/environment/install-gnutls-and-compile-emacs-from-source/</guid>
      <description>EmacsのLogo1目次  今の環境にGnutlsがない場合 潜在的なリスク Gnutlsをインストール その他の問題  今の環境にGnutlsがない場合 今の環境にGnutlsがない場合は，ソースからEmacsをコンパイルする時に以下の設定が必要。
./configure --with-gnutls=no 他にも依存されるライブラリーなどが足りない場合は，例えば以下のように設定をする。
bash configure --prefix=$HOME/.local --with-gif=no --with-gnutls=no これでデフォルトのパスとかへの権限や，ライブラリーが足りない場合でもソースからインストール出来てしまう。
潜在的なリスク 以上のようにEmacsを$HOME/.localへのインストールが出来てしまうけど， Gnutlsがサポートされないゆえに，Emacsでインターネットが必要となった時にhttpsが使えない。
Emacsが初期化される時だけなら，設定ファイルの中のMelpaリンクを全てhttpに変更すれば済ませるが， セキュリティ上にあまりお勧めができないし，今後Emacsの拡張機能を使う時のリスクにもなる。
例えば，google-translateのEmacs拡張パッケージを使う場合は， Emacsのelpaフォルダーにあるgoogle-translateの中の全ての*.elにあるhttpsをhttpに書き換えても， 実際に使う時に一部の機能にとってはhttpsが必須で翻訳が正常に機能しない恐れがある。
ここでは，*.elを変更した後に，*.elcを削除しないと変更が反映されない可能性がある。
Gnutlsをインストール 以上の問題を解決するもっとも簡単な方法としては， 今の環境にGnutlsをインストールしてからソースからもう一度Emacsをインストールすること。
OpenSUSEを例として，以下のコマンドでGnutlsをインストールする。
sudo zypper install gnutls その他の問題 checking for library containing tputs... no configure: error: The required function &amp;#39;tputs&amp;#39; was not found in any library. The following libraries were tried (in order): libtinfo, libncurses, libterminfo, libcurses, libtermcap Please try installing whichever of these libraries is most appropriate for your system, together with its header files.</description>
    </item>
    
    <item>
      <title>僕のシェル移行記録</title>
      <link>https://xinii.github.io/ja/blog/environment/my-shell-migration-record/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://xinii.github.io/ja/blog/environment/my-shell-migration-record/</guid>
      <description>bashからzshに移行 虽然我使用zsh shell两周后就换到fish shell了（关于fish shell下面有专门介绍）， 但这并不否认zsh shell仍然是个很好的shell。 你可以通过下面的方式从任意的shell切换至zsh shell。
 安装zsh时通过下面的指令：  brew install zsh (MacOS) apt install zsh (Ubuntu / Linux Mint)  如果你想要知道现在系统裡已经安装好的shell，输入下面的指令：  cat /etc/shells  如何将zsh作为你默认的shell呢？，输入下面的指令：  chsh -s /usr/local/bin/zsh  关于配置文件的读取错误  shell脚本解释出错时可以查看一下当前所使用的sh路径， 比如有可能是sh指向了dash导致出错。 通过下面的语句查看。
ls -l `which sh`  脚本解释器在语法上的不同点  从传统的bash等shell换到zsh时会发现集合的第一个元素的索引是从1开始的， 如果希望从0开始，在配置文件中配置下面语句即可。
 Fix array index for zsh:  if [ &amp;#34;$ZSH_NAME&amp;#34; = &amp;#34;zsh&amp;#34; ];then setopt localoptions ksharrays fi 配置zsh shell 与bash shell的.bashrc类似，zsh的配置也需要一个配置文件， 这个文件是在用户目录下的.</description>
    </item>
    
  </channel>
</rss>