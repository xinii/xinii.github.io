[{"authors":["xin"],"categories":null,"content":" 機械学習及び深層学習の応用に関する研究に従事し，不均一・偏りのあるデータに対するサンプリング手法および学習アルゴリズムに注目している。\n","date":1583020800,"expirydate":-62135596800,"kind":"term","lang":"ja","lastmod":1583020800,"objectID":"addc4885726ec1c1a1451bb0c5466034","permalink":"https://xinii.cf/ja/author/xin-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ja/author/xin-li/","section":"authors","summary":"機械学習及び深層学習の応用に関する研究に従事し，不均一・偏り","tags":null,"title":"Xin Li","type":"authors"},{"authors":null,"categories":["Configuration tool"],"content":"","date":1593475200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1593475200,"objectID":"9d218bb02591dc362b63b96839feb951","permalink":"https://xinii.cf/ja/project/xinconfig/","publishdate":"2020-06-30T00:00:00Z","relpermalink":"/ja/project/xinconfig/","section":"project","summary":"Emacs, bash, fish shell, tmux, anyenv, ..., configure anything with xinconfig","tags":["Emacs","Bash","Fish shell","Script"],"title":"A reasonable configuration tool for your unified working environment","type":"project"},{"authors":null,"categories":["Windows"],"content":"  目次  Windows 10のアクティベーション  いくつか便利のツールをインストールする  msys2を設定する    Windows 10のアクティベーション   cmd を開く\nslmgr -ipk {your product key} slmgr -skms {kms server address of your company} slmgr -ato    いくつか便利のツールをインストールする    Msys2\n  AutoHotKey\n  Ricty\n    msys2を設定する  pacman -S git fish tmux emacs gcc python cd ~ git clone https://github.com/xinii/xinconfig .xinconfig cd .xinconfig ./setenv fish exec fish set_conf tmux set_el auto set_el cn change_emacs xin emacs ssh-keygen -A emacs /etc/ssh/sshd_config #Port **** #PasswordAuthentication no cat {path to your pub key} \u0026gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh /usr/bin/sshd    ","date":1591228800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1591228800,"objectID":"05b2164c449901d188d13ac057a28036","permalink":"https://xinii.cf/ja/post/some-installations-for-windows-10/","publishdate":"2020-06-04T00:00:00Z","relpermalink":"/ja/post/some-installations-for-windows-10/","section":"post","summary":"この記事はWindows 10をクリーンインストールした後のいくつかの作業を紹介する。Windowsの使用には必須ではないけど，僕にとってはより効率的な仕事のために必ず入れておくのでエンジニアにはお勧め。","tags":["Activation","MSYS2","AutoHotkey","Ricty"],"title":"Windows 10をクリーンインストールした後の作業","type":"post"},{"authors":null,"categories":["Windows"],"content":"  目次  日本語キーボードのレイアウトに関するレジストリー設定  スキャンコードについて  スキャンコードの例1  レジストリーでスキャンコードのマッピングを行うためには    キーボードレイアウトの種類を変更  中国語入力において英語配列から日本語配列に  他の言語の入力法において〇〇配列から〇〇配列に    「マイコンピュータ」や「PC」の画面に不明なアイコンが出た時のレジストリー設定  どうしてもローカルネットワークのNASとかに繋がらない時のレジストリー設定2  参考資料    日本語キーボードのレイアウトに関するレジストリー設定  スキャンコードについて   まずは，ウィキペディアに載せたスキャンコードの定義を見よう\n スキャンコード (scancode) とは、コンピュータのキーボードのキーが押されたり離されたりしたときに、 キーボードからCPUに送られるコード（符号）のこと。走査コード（そうさコード）ともいう。 - Wikipedia\n   スキャンコードの例1     キー コード     RCtrl 1D E0   LAlt 38 00   RAlt 38 E0   ESC 01 00   Insert 52 E0   Enter 1C 00   Caps 3A 00   Space 39 00   無変換 7B 00   変換 79 00      レジストリーでスキャンコードのマッピングを行うためには    まず， Win key + R を押して regedit を入力したら Enter キーを押す。 そうすると，Windowsのレジストリーエディターが開かれたはず。 そこでレジストリーエディターで以下の場所を開く。\nコンピューター\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout    次に，右クリックしたら，「新規 - バイナリ値(B) - Scancode Map」の順に「Scancode Map」というバイナリキーを作る。\n 「Scancode Map」のバリュー（マッピングのルール）については， 以下のような僕の設定を参考していじってみればいいと思う。 ただし，「バージョン」，「フラグ」と「終端ヌル値」の部分は残る必要がある。 あと，「マッピング数」については，「終端ヌル値」も含めて設定したマッピングルールの数を数えて書けば良い。\n  Logicool K380のための自分用レイアウト\n   Index Scancode 意味 Scancode 意味     0000 00 00 00 00 バージョン 00 00 00 00 フラグ   0008 08 00 00 00 マッピング数 1D 00 3A 00 LCtrl \u0026lt;- Caps   0010 3A 00 1D 00 Caps \u0026lt;- LCtrl 1D E0 38 00 RCtrl \u0026lt;- LAlt   0018 38 00 7B 00 LAlt \u0026lt;- 無変換 38 E0 70 00 RAlt \u0026lt;- かなキー   0020 39 00 79 00 Space \u0026lt;- 変換 01 00 38 E0 ESC \u0026lt;- RAlt   0028 00 00 00 00 終端ヌル値        FILCO Majestouch MINILA Airのための自分用レイアウト\n   Index Scancode 意味 Scancode 意味     0000 00 00 00 00 バージョン 00 00 00 00 フラグ   0008 0B 00 00 00 マッピング数 1C 00 52 E0 Enter \u0026lt;- Insert   0010 1D E0 38 00 RCtrl \u0026lt;- LAlt 1D E0 70 00 RCtrl \u0026lt;- かな   0018 7B 00 46 00 無変換 \u0026lt;- ScrLk 79 00 1D E1 変換 \u0026lt;- Pause   0020 00 00 45 00 なし \u0026lt;- NumLock 00 00 9D E1 なし \u0026lt;- Break   0028 38 00 7B 00 LAlt \u0026lt;- 無変換 01 00 79 00 ESC \u0026lt;- 変換   0030 52 E0 29 00 Insert \u0026lt;- E/J 00 00 00 00 終端ヌル値      ここで，「Pause/Break」がいつくかのコードで組み合わせたもので， 「NumLock」のコードも入っているため， 以上のように設定する時に少し工夫をした。 以下も参考\n Pause 0xE1:0x1D:0x45 [ 84key Ctrl (0x1D) + NumLock (0x45)], no auto repeat, break code 0xE1:0x9D:0xC5 - Keyboard Scancode Map\n       キーボードレイアウトの種類を変更  中国語入力において英語配列から日本語配列に    まずは，レジストリーエディターで以下の場所を開く\nコンピューター\\HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Keyboard Layouts\\00000804    次に，以下のように変更をする\n   キーの名前 変更前 変更後     Layout File KBDUS.DLL KBD106.DLL        他の言語の入力法において〇〇配列から〇〇配列に    他の言語の入力法の場合は，レジストリーのパスの=00000804=のところを変更し， 変更後の=***.DLL=の部分に適切な内容で入れ替えたら良いと思う。\n      「マイコンピュータ」や「PC」の画面に不明なアイコンが出た時のレジストリー設定    以下のレジストリーのパスに，その不明なものを探して見つけたら見つけたものを削除すれば良い\nコンピューター\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace      どうしてもローカルネットワークのNASとかに繋がらない時のレジストリー設定2    まずは，以下の場所を開く\nコンピューター\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters    次に，下のような変更を行う\n   キーの名前 変更前 変更後     AllowInsecureGuestAuth 0 1        参考資料    上書きモードになる『Insert』キーを無効化する方法\n  Scancode Mapによるキー割り当ての変更\n  Homegroup removed! How to get network sharing work with Windows 10 v1803\n    1 スキャンコード一覧（スキャンコードセット1）\n  2 NASに接続できない！原因はSMB1.0ではなかった！\n    ","date":1591228800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1591228800,"objectID":"ded587e70c48694d473ab2cd2848c700","permalink":"https://xinii.cf/ja/post/several-windows-registry-configurations/","publishdate":"2020-06-04T00:00:00Z","relpermalink":"/ja/post/several-windows-registry-configurations/","section":"post","summary":"Windowsのシステム環境設定だけではなかなか叶えない機能だけど，重くなるのでサードパーティ製のソフトウェアも使いたくない？レジストリーを使いこなそう！","tags":["Registry","Scancode","Keyboard layout"],"title":"より効率的な作業を行うためのいくつかWindowsのレジストリー設定","type":"post"},{"authors":null,"categories":["Linux"],"content":"  目次  使う予定のコマンド  このコマンドがない？以下のようにコマンドを入れる  以下のステップに従ってインストール  リポジトリを登録  リポジトリを更新  必要なものをインストール      使う予定のコマンド  add-apt-repository    このコマンドがない？以下のようにコマンドを入れる  apt install software-properties-common    以下のステップに従ってインストール  リポジトリを登録  add-apt-repository ppa:kelleyk/emacs apt-add-repository ppa:fish-shell/release-3    リポジトリを更新  apt update    必要なものをインストール  apt install emacs26 apt install fish      ","date":1591142400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1591142400,"objectID":"5c04cf7203f3d0ee36c4c4007d45d585","permalink":"https://xinii.cf/ja/post/add-apt-repository-for-fish-and-emacs/","publishdate":"2020-06-03T00:00:00Z","relpermalink":"/ja/post/add-apt-repository-for-fish-and-emacs/","section":"post","summary":"Emacs26をインストールしたいけどaptのアップグレードが効かない？この記事の方法を見てみて","tags":["apt","Fish shell","Emacs"],"title":"FishとEmacsのためのaptリポジトリ追加","type":"post"},{"authors":null,"categories":["SSH"],"content":"  目次  SSHの途切れる現象  やり方  その他    アンドロイドのTermuxアプリを使ってSSHデーモンを立てる  インストール  キーを設定する  デバッグモードをデーモンを起動  デーモンを起動  パソコンで立てたデーモンにログイン      SSHの途切れる現象    SSHを使ってリモートサーバーにログインしている時に，一定の時間内に操作がなければ， Write failed: Broken pipe というエラーが出てきてしまう可能性がある。\n  以上のことを避けるために，クライアント側やサーバー側のSSH設定を変える必要がある。\nやり方     クライアント側で対処する\n  /etc/ssh/ssh_config あるいは ~/.ssh/config に以下の内容を記述する。\nServerAliveInterval 15 ServerAliveCountMax 10   この設定は，15秒ごとに10回の応答が送信されることを意味する。 それでも応答がなければ接続が切断される。\n  サーバー側で対処する\n  以下の内容を /etc/ssh/sshd_config に記述する。\nClientAliveInterval 30 ClientAliveCountMax 5   この設定は，30秒ごとに5回の応答が送信されることを意味する。 それでも応答がなければ接続が切断される。\nその他   SSHを使う際にtmuxやscreenなどを使うことがおすすめ。 これで，リモートへの接続が途切れたとしても， リモートに再びログインした後にすでにあるセッションにattachすれば元の環境が戻ってくる。\n    アンドロイドのTermuxアプリを使ってSSHデーモンを立てる  インストール  apt install openssh    キーを設定する  ssh-keygen cat ~/.ssh/id_rsa.pub \u0026gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh    デバッグモードをデーモンを起動  sshd -d    デーモンを起動  sshd    パソコンで立てたデーモンにログイン   アンドロイドで生成されたプライベートキー ~/.ssh/id_rsa をパソコン側のsshクライアントに設定し， アンドロードのIPアドレスにポート 8022 を加えてユーザ名なしで接続すれば良い。\n    ","date":1591142400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1591142400,"objectID":"09b144bbaa80955005ddd230644e63a4","permalink":"https://xinii.cf/ja/post/several-ssh-configurations/","publishdate":"2020-06-03T00:00:00Z","relpermalink":"/ja/post/several-ssh-configurations/","section":"post","summary":"SSHの途切れる現象に腹立つ？アンドロイドのTermux使ってSSHサーバーを建てたい？この記事を読もう！","tags":["Termux","Android","Daemon","Keygen"],"title":"いくつかのSSH設定","type":"post"},{"authors":["Xin Li","Hiroshi Arai","Tomoki Hamagami"],"categories":["Journal article"],"content":"  Click the Cite button above to copy or download the publication metadata.   ","date":1583020800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1583020800,"objectID":"2bd6007a4df432d74c96a1f872b6e761","permalink":"https://xinii.cf/ja/publication/li2020wave/","publishdate":"2020-03-01T00:00:00Z","relpermalink":"/ja/publication/li2020wave/","section":"publication","summary":"A method for the estimation of wave-making resistance from the hull form and Froude number through deep learning is proposed. At the same time, this research also gives a solution when the data are skewed, which solves the problem of low generalization performance. The reduction of wave-making resistance is an essential issue in hull form design. However, the estimation of wave-making resistance is a time-consuming task that depends on experimental measurements. To enable direct estimation of the wave resistance from hull form, deep learning, which enables end-to-end learning, is an effective approach. The proposed method has two phases. First, auto-encoders, which reduce the dimension of the offset and the profile data, are generated, while performing to the skewed offset data, use an improved sampling method. Subsequently, after the regularization of these data, a deep neural net for regression estimation of wave-making resistance is generated. The results of evaluation experiments show that the proposed method can estimate wave-making resistance with high precision.","tags":["Deep learning","Auto-encoder","Priority sampling"],"title":"船型データの分布を考慮した深層学習による造波抵抗推定","type":"publication"},{"authors":["Xin Li","Tomoki Hamagami"],"categories":["Conference paper"],"content":"  Click the Cite button above to copy or download the publication metadata.   ","date":1575504000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1575504000,"objectID":"313965cb1129a8aafe5701c0f53e43ad","permalink":"https://xinii.cf/ja/publication/li2019improved/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/ja/publication/li2019improved/","section":"publication","summary":"Auto-encoder as the representative method for data dimensionality reduction and feature extraction, plays a very important role on machine learning. However, the data in the actual research work or industrial production are not always normalized data, at this time, it will lead high reconstruction error and slow convergence speed. This study proposed an improved auto-encoder and a denoising auto-encoder based on 2-level prioritized experience replay, which can improve accuracy and reduce loss, while processing a dimensionality reduction or feature extraction problem on high dimension skewed data. In order to evaluate the effectiveness of the proposed method, three models of high dimension simulation dataset which on different skewed degrees are generated. The results of evaluation experiments show that the proposed method can get lower reconstruction error than conventional method for high dimension skewed simulation data.","tags":["Deep Learning","Auto-encoder","Priority sampling"],"title":"An Improved Auto-encoder Based on 2-Level Prioritized Experience Replay for High Dimension Skewed Data","type":"publication"},{"authors":null,"categories":["pitfall"],"content":" 僕は家計簿をOrg-modeで記録していて， その中にPythonのコードを書き，実行とかをやっている。 しかし，以下のエラーになったことがある。\nFile \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 3 SyntaxError: Non-UTF-8 code starting with \u0026#39;\\xe3\u0026#39; in file \u0026lt;stdin\u0026gt; on line 3, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details   考えられるのは， # -*- coding: utf-8 -*- を先頭につけることしかないけど， 結局 Org-modeの中のPythonのコードブロック なら効かなかった。\n 解決法は以下のようなコードブロックのヘッダーを，\n#+begin_src python :results file :var data=test   以下のように変換する\n#+begin_src python :results file :var data=test[, 0:2]   すなわち，必須となる数字や日付などが入っているテーブルの列だけを Pythonに転送すると，一時的なエラーを解消できるけど， 本質的には解決していない。\n 引き続き調査。\n","date":1574467200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1574467200,"objectID":"82e86f484c03d24c3b5466f323f48756","permalink":"https://xinii.cf/ja/post/pitfall-while-using-python-code-block-on-emacs-org-mode/","publishdate":"2019-11-23T00:00:00Z","relpermalink":"/ja/post/pitfall-while-using-python-code-block-on-emacs-org-mode/","section":"post","summary":"EmacsのOrg-modeが必要に便利なツールで，そのままコードをコンパイルできることが魅力的。ただPythonを使う際に落とし穴がある，一緒に見てみよう！","tags":["Emacs","Org-mode","Python"],"title":"EmacsのOrg-modeにおいてPythonコードブロックを使った時の落とし穴","type":"post"},{"authors":null,"categories":["pitfall"],"content":" pLaTeXを使う際に，なぜか特定のepsグラフを文書のソースに入れたらビルドが失敗。 しかも失敗した時のログをみると，まったく問題を特定できない。\n 例えば，入れたすべてのfigureの定義が見つからないとかに関するエラー。 このようなエラーになった時に， epsグラフのスケールを正方形に近い形状から矩形にしたら， 問題解決できた。\n 原因はまだ不明だけど，また調査してみる。 たまにハマってしまったので，ここにメモを残っておく。\n 以上。\n","date":1574467200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1574467200,"objectID":"c892f8fb2d95453696abeb8d5baeff4f","permalink":"https://xinii.cf/ja/post/pitfall-while-inserting-figure-into-latex-article/","publishdate":"2019-11-23T00:00:00Z","relpermalink":"/ja/post/pitfall-while-inserting-figure-into-latex-article/","section":"post","summary":"pLaTeXを使う際に，扱うepsグラフのスケールによってコンパイルが失敗になってしまう可能性があるかもしれないので気をつけて！","tags":["LaTeX","pLaTeX","eps"],"title":"pLaTeXを使う際に扱うepsグラフに関する落とし穴","type":"post"},{"authors":null,"categories":"Music","content":" コード例  \\version \u0026#34;2.18.2\u0026#34; \\score { \\new Staff \u0026lt;\u0026lt; \\new Voice \\relative c\u0026#39;\u0026#39;\u0026#39; { \\set midiInstrument = #\u0026#34;flute\u0026#34; \\voiceOne \\key g \\major \\time 2/2 r2 g-\u0026#34;Flute\u0026#34; ~ g fis ~ fis4 g8 fis e2 ~ e4 d8 cis d2 } \\new Voice \\relative c\u0026#39;\u0026#39; { \\set midiInstrument = #\u0026#34;clarinet\u0026#34; \\voiceTwo b1-\u0026#34;Clarinet\u0026#34; a2. b8 a g2. fis8 e fis2 r } \u0026gt;\u0026gt; \\layout { } \\midi { \\context { \\Staff \\remove \u0026#34;Staff_performer\u0026#34; } \\context { \\Voice \\consists \u0026#34;Staff_performer\u0026#34; } \\context { \\Score tempoWholesPerMinute = #(ly:make-moment 72 2) } } }    出力例   （後で追加）\n  ","date":1573862400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1573862400,"objectID":"f135110ec9e45d181cc3aa22de488d6c","permalink":"https://xinii.cf/ja/post/generate-sheet-music-with-lilypond-on-emacs/","publishdate":"2019-11-16T00:00:00Z","relpermalink":"/ja/post/generate-sheet-music-with-lilypond-on-emacs/","section":"post","summary":"GUIの楽譜作成ツールに飽きた？EmacsとLilypondで楽譜を作ろう！","tags":["Emacs","LilyPond","Sheet music"],"title":"EmacsとLilypondで楽譜生成","type":"post"},{"authors":null,"categories":"Music","content":" 音階と音の周波数   次の表に，ピアノの鍵盤における88のキーに相応する音の周波数を示す。\n   鍵盤番号 周波数(Hz) 階名 音名     1 27.500 ラ A0（イ）   …      37 220.000 ラ A3（イ）   38 233.082  A#3   39 246.942 シ B3（ロ）   40 261.626 ド C4（ハ）   41 277.183  C#4   42 293.665 レ D4（ニ）   43 311.127  D#4   44 329.628 ミ E4（ホ）   45 349.228 ファ F4（ヘ）   46 369.994  F#4   47 391.995 ソ G4（ト）   48 415.305  G#4   49 440.000 ラ A4（イ）   50 466.164  A#4   51 493.883 シ B4（ロ）   52 523.251 ド C5（ハ）   …      88 4186.009 ド C8（ハ）     音の周波数を等比数列 $a_0, a_1, a_2 \\dots a_{12}$ とし， 公比を $r$ とすると，以下の関係がある。\n $$a_{12} = a_{0} \\times r^{12} = a_0 \\times 2$$\n また，1オクターブの二つの音の周波数が2倍の関係なので， 以下の式によって公比\\(r\\)がわかるようになる。\n $$r^{12} = 2 \\Rightarrow r = \\sqrt[12]{2} \\approx 1.059463094$$\n 従って，任意の音に対して，\\(n\\)個半音上の音を計算する方法は以下の式に示す。\n $$a_n = a_0 \\times r^n = a_0 \\times 2^{\\frac{n}{12}}$$\n 以上によると，絶対音感を持っている人が， 任意の一つの音を聞いて，その周波数がわかる。 具体的な数値がわからなくても， その数値は必ず一つの音名に相応するので，音名がわかる。 これに対して，相対音感が\\(a_0\\)が必要である。 また，音名が固定だが，階名が変化するものである。 \\(a_0\\)を任意の音を指定しておく前提なら， 耳の感覚で，他の音を計算するものである。\n 絶対音感が，5歳くらいまでにトレーニングしないと， 身に着けにくくなるとよく言われている。 これはなぜだろうか。 母国語に似ているものなので， この視点から分析してみる。\n  絶対音感を身に着けるにはなぜ5歳までトレーニングする必要があるか   ここで，まずいくつかの言語の例をあげてみたい。\n  言語に関する時間\n  言語に関する意味\n  言語に関する発音\n  （未完成… 時間がある時に続いて書く）\n  ","date":1573776000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1573776000,"objectID":"0dd0b67d7c2751a8df0cc4b58e6863f2","permalink":"https://xinii.cf/ja/post/about-absolute-pitch/","publishdate":"2019-11-15T00:00:00Z","relpermalink":"/ja/post/about-absolute-pitch/","section":"post","summary":"絶対音感に関する紹介とそれに関する考察を見てみよう！","tags":"Absolute pitch","title":"絶対音感について","type":"post"},{"authors":null,"categories":["OpenCV"],"content":"  目次  swapファイルを生成  インストールのスクリプトを生成  スクリプトを実行する  インストールされたOpenCVをテスト    swapファイルを生成   コンパイル途中にメモリー不足などの問題を防ぐため， swapという交換用ファイルを任意のパスに生成しておく。 このファイルは，OS再起動の後に自動的に消えるが， 全てのインストールが終わったら，手作業で交換用ファイルを削除しても良い。\n$ fallocate -l 4G swapfile $ chmod 600 swapfile $ mkswap swapfile $ sudo swapon swapfile $ swapon -s    インストールのスクリプトを生成   OpenCV 4.0.0をインストールためのリンク\n 以上は，OpenCV 4.0.0をインストールためのリンクで，ここでは，OpenCV 4.1.0をインストールしたいため， バージョン番号の部分に少し手を加える。\n#!/bin/bash # # Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved. # # NVIDIA Corporation and its licensors retain all intellectual property # and proprietary rights in and to this software, related documentation # and any modifications thereto. Any use, reproduction, disclosure or # distribution of this software and related documentation without an express # license agreement from NVIDIA Corporation is strictly prohibited. # if [ \u0026#34;$#\u0026#34; -ne 1 ]; then echo \u0026#34;Usage: $0\u0026lt;Install Folder\u0026gt;\u0026#34; exit fi folder=\u0026#34;$1\u0026#34; user=\u0026#34;nvidia\u0026#34; passwd=\u0026#34;nvidia\u0026#34; echo \u0026#34;** Install requirement\u0026#34; sudo apt-get update sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev sudo apt-get install -y python2.7-dev python3.6-dev python-dev python-numpy python3-numpy sudo apt-get install -y libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev sudo apt-get install -y libv4l-dev v4l-utils qv4l2 v4l2ucp sudo apt-get install -y curl sudo apt-get update echo \u0026#34;** Download opencv-4.1.0\u0026#34; cd $folder curl -L https://github.com/opencv/opencv/archive/4.1.0.zip -o opencv-4.1.0.zip curl -L https://github.com/opencv/opencv_contrib/archive/4.1.0.zip -o opencv_contrib-4.1.0.zip unzip opencv-4.1.0.zip unzip opencv_contrib-4.1.0.zip cd opencv-4.1.0/ echo \u0026#34;** Building...\u0026#34; mkdir release cd release/ cmake -D WITH_CUDA=ON -D CUDA_ARCH_BIN=\u0026#34;5.3\u0026#34; -D CUDA_ARCH_PTX=\u0026#34;\u0026#34; -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.0/modules -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python2=ON -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. make -j3 sudo make install sudo apt-get install -y python-opencv python3-opencv echo \u0026#34;** Install opencv-4.1.0 successfully\u0026#34; echo \u0026#34;** Bye :)\u0026#34;   以上のスクリプトを sh のフォーマットで保存する。例えば install_opencv4.1.0_Nano.sh 。\n  スクリプトを実行する  mkdir opencv sh install_opencv4.1.0_Nano.sh opencv   インストールのプロセスが割と時間かかるため，インストールが終わるまで待つ。 ここで，tmuxとかに任せてバックグラウンドでやれば，なんかあった時にattachすれば済むのでおすすめ。\n  インストールされたOpenCVをテスト   コマンドラインに python を叩くと import cv2 をためしたらエラーがなければ終わり。\n ただ，pyenvなどのpython環境管理ツールを使っている方なら， pyenvを使って入れたpythonにおいてはOpenCVを読み込めない場合がある。 解決案としては，OpenCVのライブラーのソフトリンクをpyenvのpythonの下に置くこと。\n 例えば，以下のようなpyenvのpythonのライブラリーのパスがある。\n/home/{username}/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages   また，インストールされたOpenCVのライブラリーのパスが以下となる。\n/usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so   この場合は，以下のコマンドでソフトリンクを作れる。\ncd /home/{username}/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages ln -s /usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so ./   また，事前にpyenvのpythonのpipを使って， pip install numpy でnumpyを入れておくと さっきのように import cv2 でテストしてエラーがなければおしまい。\n  ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1562889600,"objectID":"1f4a76eeab4fb4292a9a1961d0b4b7b1","permalink":"https://xinii.cf/ja/post/install-opencv-on-jetson-nano/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/ja/post/install-opencv-on-jetson-nano/","section":"post","summary":"Jetson NanoにOpenCVをインストールする際に少し工夫する必要があるかもしれない，一緒に見てみよう！","tags":["Jetson Nano","Python"],"title":"Jetson NanoにOpenCVをインストール","type":"post"},{"authors":null,"categories":["Emacs"],"content":"  目次  今の環境にGnutlsがない場合  潜在的なリスク  Gnutlsをインストール  その他の問題    今の環境にGnutlsがない場合   今の環境にGnutlsがない場合は，ソースからEmacs1をコンパイルする時に以下の設定が必要。\n./configure --with-gnutls=no   他にも依存されるライブラリーなどが足りない場合は，例えば以下のように設定をする。\nbash configure --prefix=$HOME/.local --with-gif=no --with-gnutls=no   これでデフォルトのパスとかへの権限や，ライブラリーが足りない場合でもソースからインストール出来てしまう。\n  潜在的なリスク   以上のようにEmacsを $HOME/.local へのインストールが出来てしまうけど， Gnutlsがサポートされないゆえに，Emacsでインターネットが必要となった時にhttpsが使えない。\n Emacsが初期化される時だけなら，設定ファイルの中のMelpaリンクを全てhttpに変更すれば済ませるが， セキュリティ上にあまりお勧めができないし，今後Emacsの拡張機能を使う時のリスクにもなる。\n 例えば， google-translate のEmacs拡張パッケージを使う場合は， Emacsのelpaフォルダーにある google-translate の中の全ての *.el にある https を http に書き換えても， 実際に使う時に一部の機能にとっては https が必須で翻訳が正常に機能しない恐れがある。\n ここでは， *.el を変更した後に， *.elc を削除しないと変更が反映されない可能性がある。\n  Gnutlsをインストール   以上の問題を解決するもっとも簡単な方法としては， 今の環境にGnutlsをインストールしてからソースからもう一度Emacsをインストールすること。\n OpenSUSEを例として，以下のコマンドでGnutlsをインストールする。\nsudo zypper install gnutls    その他の問題  checking for library containing tputs... no configure: error: The required function \u0026#39;tputs\u0026#39; was not found in any library. The following libraries were tried (in order): libtinfo, libncurses, libterminfo, libcurses, libtermcap Please try installing whichever of these libraries is most appropriate for your system, together with its header files. For example, a libncurses-dev(el) or similar package. make: *** No targets specified and no makefile found. Stop. make: *** No rule to make target \u0026#39;install\u0026#39;. Stop.   もしすでにGnutlsがインストール済みで， make を叩くと以上のエラーが出てきてしまったら， OpenSUSE環境の場合は， ncurses-devel というパッケージが必要だということなので， 以下のコマンドで入れておこう。\nsudo zypper install ncurses-devel    1 The logo of Emacs\n    ","date":1556928000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1556928000,"objectID":"eb22f873273a534327f7e7a79c9e5128","permalink":"https://xinii.cf/ja/post/install-gnutls-and-compile-emacs-from-source/","publishdate":"2019-05-04T00:00:00Z","relpermalink":"/ja/post/install-gnutls-and-compile-emacs-from-source/","section":"post","summary":"ソースからEmacsをコンパイルする時にGnutlsに関するエラーが出た？一体どういうことかを見てみよう！","tags":["GnuTLS","Compile"],"title":"GnutlsをインストールしてソースからEmacsをコンパイル","type":"post"},{"authors":null,"categories":["Shell"],"content":"  目次  BashからZ shell（zsh）に  インストール作業  注意点  zshのコンフィグレーションについて    zshからFish shell（fish）に  fishのインストール作業  フォルトシェルの変更  fishのコンフィグレーションファイル  fishを使うときに出てきたPythonに関する環境変数の関連問題      BashからZ shell（zsh）に   zshを使って二週間くらい経ったらFish shellに乗り換えた。 理由については後述するけど， zshが素晴らしいシェルで使いにくいなどの理由で乗り換えたわけでもない。\nインストール作業   zshをインストールするには，以下のコマンドを使う。\n  macOS\n  brew install zsh    UbuntuやLinux Mint\n  apt install zsh   現在のシステムにインストールされているシェルを確認したい場合は以下のコマンドを使う。\ncat /etc/shells   システムのデフォルトシェルをzshに変更するには，以下のコマンドを使う。\nchsh -s /usr/local/bin/zsh    注意点    コンフィグレーションの読み込みエラーについて\n  シェルスクリプトが時々エラーになったときに， 現在の環境の sh のパスを確認しおいたほうが良いかも。 例えば， sh が dash にリンクされている原因でエラーになった可能性がある。 以下のコマンドで確認する。\nls -l `which sh`    スクリプトのコンパイラーにおけるBashの文法との相違点\n  配列のインデックスにおける文法的なルールについては， Bashの場合は，配列にある最初の要素が0から始まり， zshの場合は，1から始まる。 zshに乗り換えたらなかなか慣れられない場合は， 以下のような内容をコンフィグレーションファイルに設定しておけば， Bashの文法のように，配列が0から始まるようになる。\nif [ \u0026#34;$ZSH_NAME\u0026#34; = \u0026#34;zsh\u0026#34; ];then setopt localoptions ksharrays fi    zshのコンフィグレーションについて   Bashの .bashrc と同じ， zshもコンフィグレーションファイルが必要。 デフォルトでは，ホームディレクトリにある .zshrc のファイルになる。 ここをクリックすることで，僕がGithubにアップロードしたコンフィグレーションファイルを参照する。\n    zshからFish shell（fish）に   前述のように，zshを使用して二週間の後にfishに乗り換えた。 その理由は，fishに設定とかなにもやらなくてもデフォルトで十分使える。 fishに乗り換えたら，シェルの移行が一段落になり，以下はその記録。\nfishのインストール作業    macOS:\n  brew install fish    UbuntuやLinux Mint:\n  apt install fish    openSUSE:\n  sudo zypper install fish   ここで，WindowsのLinuxサブシステムであるopenSUSE環境の場合は， デフォルトで root の権限が必要なので，コマンドの最初に sudo をつけておく。\n  フォルトシェルの変更   以下のコマンドで行う。パーミッションが足りない場合は sudo を使う。\nchsh -s /usr/bin/fish   これで，デフォルトシェルの切り替えができた。 いったん現在のセッションをログアウトし，再ログインするとfishに入るはず。\n ここで，もしfishに入ったら， hostname などのエラーがたくさん出た場合は， 現在の環境に hostname というパッケージが足りないということがわかる。 ソースからコンパイルするか， 使われているLinuxディストリビューションのパッケージマネージャを使って hostname を入れる。\n 例えば，openSUSEの場合は以下のコマンドを使う。\nsudo zypper install hostname    fishのコンフィグレーションファイル   zshと同じ，僕が書いたコンフィグレーションファイルをGithubにアップロードしてあるので， ここをクリックすることで参照しよう。\n  fishを使うときに出てきたPythonに関する環境変数の関連問題   僕がはまったところが以下二点がある。\n  tmux\n  tmuxがバックグラウンドで動いているセッションがある場合は， PYTHONPATH の環境変数を変更しても更新されない。 このときに，すべてのtmuxセッションを閉じてから環境変数の変更が有効になる。 fishシェル以外もこの問題に遭遇されると想定できるが， 僕は今回fishにおいて初めてはまったので記録を残す。\n  PYTHONPATH について\n  fishにおいて環境変数を定義する時にやり方は以下に示された。\nset \u0026lt;variable_name\u0026gt; \u0026lt;parameter_1\u0026gt; \u0026lt;parameter_2\u0026gt;   このやり方はとても便利で優越性がある。 ただし， PYTHONPATH を設定する場合は，以下のように行ったほうが良い。\nset PYTHONPATH \u0026lt;parameter_1\u0026gt;:\u0026lt;parameter_2\u0026gt;   なぜかというと，簡単にテストした結果， macOSでは，二つの方法がどっちでも目的に達成できる。 Jetson Nanoに動いているUbuntuでは，二番目の方法しか機能しない。 具体的な原因は確認しなかったが， OSが異なって，Pythonのバージョンが同じでも， CPUがx86かarmかによってコンパイル方法が異なったことでエラーになるかと考えている。 いったんここに記録し，引き続き調査。\n    ","date":1556841600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1556841600,"objectID":"1f84eaa4996f8152bfb64399cb2449ef","permalink":"https://xinii.cf/ja/post/my-shell-migration-record/","publishdate":"2019-05-03T00:00:00Z","relpermalink":"/ja/post/my-shell-migration-record/","section":"post","summary":"Bash - Z shell - Fish shell","tags":["Bash","Z shell","Fish shell","tmux"],"title":"僕のシェル移行記録","type":"post"},{"authors":null,"categories":["Linux"],"content":"  目次  Linux MintをインストールするためのUSBメモリーを用意する  Linux MintのISOファイル      重要：インストーラをUSBメモリーに書き込むことでデータが失ってしまうため， 始める前に，USBメモリーに何も保存されていないか， あるいは失われてもよいコンテンツしか保存されていないことを 必ず確認しておく。 また，PCに空のドライブを一つ準備しておく。 Cドライブでもよいが，中に重要なデータは何も入っていないことを事前に確認する。   Linux MintをインストールするためのUSBメモリーを用意する   用意するのはUSBメモリーと書いているが， USBメモリーがなかったらUSBのHDDやSSDなどでも良い。 後で用意されたUSBデバイスにインストーラを書き込むので， バックアップをちゃんと取っておいたほうが良いかも。\n  Windowsを使っている場合は，ここをクリックしてUbuntuのオフィシャルマニュアルを参照できる。\n   以上のマニュアルはUbuntuをインストールする目的だが， Linux Mintをインストールするのも大体同じ。 一つだけ異なるのは，ISOイメージを選択するところ。 ここで，UbuntuのISOイメージではなく，Linux MintのISOイメージを指定すれば良い。     Linux Mintのインストーラを作成するのに使うツールがRufusというソフトウェアで， ここをクリックすることでRufusのオフィシャルサイトが開ける。 あるいはここをクリックすることで直接Rufusをダウンロードできる。\n    Linux MintのISOファイル   Linux MintのISOイメージについては，以下の場所からダウンロードできる。 ここをクリックすることでLinux Mintのオフィシャルサイトを開く。 また，ここをクリックすることで直接Linux Mint 19.1のバージョンをダウンロードできる。\n  ","date":1555977600,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1555977600,"objectID":"63d05a9c5d56340bdc3c0e109bc5a0ac","permalink":"https://xinii.cf/ja/post/install-linux-mint-from-the-usb-device/","publishdate":"2019-04-23T00:00:00Z","relpermalink":"/ja/post/install-linux-mint-from-the-usb-device/","section":"post","summary":"この記事はUSBメモリーからLinux Mintをインストールする方法を紹介する","tags":["Linux Mint","Operating System","USB","Rufus"],"title":"USBメモリーからLinux Mintをインストール","type":"post"},{"authors":null,"categories":["Static site generator"],"content":"  目次  Jekyllをインストール  Githubに公開    Jekyllをインストール   JekyllがRubyで書いた静的なサイトジェネレーター。 以下は公式サイトの紹介文。\n Jekyll is a static site generator. You give it text written in your favorite markup language and it uses layouts to create a static website. You can tweak how you want the site URLs to look, what data gets displayed on the site, and more. –Jekyll1\n  Jekyllをインストールする際に， まずはRubyのパッケージ管理ツールを入れておくとあとは便利。 よく使われているRubyのパッケージ管理ツールが gem で， Ubuntuなどのシステムにおいて， 以下のコマンドで gem が同時にインストールされる。\napt install ruby-dev   gem をインストールして， PATH の環境変数にちゃんと gem が入っていれば， gem を使っていろんなRubyのパッケージを入れることが可能になる。 もし rbenv などのバーチャル環境管理ツールを使っていれば， 実行可能な gem があればあとは同じ。 以下のコマンドでJekyllを入れる。簡単だね。\ngem install jekyll    Githubに公開   Jekyllをインストールしたら， とりあえずJekyllで作った何かしらをGithubに公開して見てみたいだね。 気持ちがわかる。\n そうしたら，記事などを色々書き始める前に，空のブログを一旦Githubに公開しよう！ まずローカルでブログを管理したい場所に以下のコマンドを叩く。\njekyll new folder-name-for-your-blog   そうすると，カレントフォルダーに folder-name-for-your-blog という名前のサブフォルダーが出来てしまう。\n そして，Githubのリポジトリのページにおいて， your-user-name-of-github.github.io という名前のリポジトリを作っておく。\n 新しいリポを作ったら， git でどう push するかとかのヒントが出てくると思うので， それに従ってさっき作った folder-name-for-your-blog フォルダーの内容を your-user-name-of-github.github.io に push すればおしまい。\n 数分後に，ブラウザを使って your-user-name-of-github.github.io にアクセスしてみれば， 何かしらのJekyllページが出てくるはず。\n このブログでも以上の方法で作っている。\n （2020年6月14日追記）\n このブログは現在 hugo という静的なサイトジェネレーターで作っている。\n 古いブログを参考していただく場合は，ここをクリックしてください。\n それでは。\n  1 Jekyllのオフィシャルサイト\n    ","date":1554163200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1554163200,"objectID":"21815f0de4793747e4dee1b6e94ecd29","permalink":"https://xinii.cf/ja/post/create-a-blog-by-jekyll-and-publish-to-github/","publishdate":"2019-04-02T00:00:00Z","relpermalink":"/ja/post/create-a-blog-by-jekyll-and-publish-to-github/","section":"post","summary":"自分のブログがほしいけどやり方はわからない？GithubがデフォルトでビルドとかをサポートしているJekyllを試してみよう！","tags":["Jekyll","Github","Blog"],"title":"Jekyllで作成したブログをGithubに公開","type":"post"},{"authors":["Jinwei Wang","Xin Li"],"categories":["Book section"],"content":"","date":1541030400,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1541030400,"objectID":"7d3c244ae321f3c0db5dc552267255c4","permalink":"https://xinii.cf/ja/publication/wang2017/","publishdate":"2018-11-01T00:00:00Z","relpermalink":"/ja/publication/wang2017/","section":"publication","summary":"","tags":["Corpus","Spanish","Don Quixote","Translation"],"title":"Multi-translation parallel corpus construction of Don Quixote","type":"publication"},{"authors":["Xin Li","Tomoki Hamagami"],"categories":["Conference paper"],"content":"","date":1535760000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1535760000,"objectID":"d83cfe8ca05a7f6649e3186c9a16b3fe","permalink":"https://xinii.cf/ja/publication/li2018prioritized/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/ja/publication/li2018prioritized/","section":"publication","summary":"","tags":["Deep learning","Auto-encoder","Priority sampling"],"title":"Prioritized Sampling Method for Autoencoder to Reduce Loss Rate for Skewed Data","type":"publication"},{"authors":["Xin Li","Masaya Nakata","Hamatsu Fumiya","Tomoki Hamagami"],"categories":["Conference paper"],"content":"","date":1498867200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1498867200,"objectID":"87042482027cb9b485efb7cf88eeeb45","permalink":"https://xinii.cf/ja/publication/li2017research/","publishdate":"2017-07-01T00:00:00Z","relpermalink":"/ja/publication/li2017research/","section":"publication","summary":"","tags":["Time series data","Anomaly detection","Multidimensional data"],"title":"A Research About Anomaly Detection Method for Multidimensional Time Series Data","type":"publication"},{"authors":["Jinwei Wang","Xin Li"],"categories":["Book section"],"content":"","date":1472688000,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1472688000,"objectID":"de0f093745f7d3840f37addc80cf88c2","permalink":"https://xinii.cf/ja/publication/wang2016/","publishdate":"2016-09-01T00:00:00Z","relpermalink":"/ja/publication/wang2016/","section":"publication","summary":"","tags":["Language education","Spanish","Oral communication"],"title":"An Empirical Study of Oral Communication Strategies for Foreign Language Students - Taking Spanish as an Example","type":"publication"},{"authors":null,"categories":null,"content":"  目次  ソフトウェア開発のプロセスについて  プロジェクトのバージョン管理  バージョン管理とは  バージョン管理の必要性    プログラミングについて  ドキュメントを活用する  注釈を書く習慣をつける  プログラミング言語    サーバーの運用  自分のパソコンからサーバーのイメージを立てる  セキュリティについて    ウェブ開発  ユーザインタフェース  ユーザーフレンドリーについて  バックエンドへの繋がり    プロジェクト開発ツールを活用する  開発環境に関するツール  その他       みなさんは，現在ソフトウェア工学について勉強していて， ソフトウェアシステムの設計・生産・管理する基本的な方法論と， 実践的な技術について学んでいると思います。\n 今回は，これらのことに関して， その周りのいくつかのポイントについて紹介した上， 皆さんはソフトウェア設計などに対する興味を引き出し， このコースの勉強とこれからソフトウェア開発のチームワークに役立てれば幸いです。\n また，将来仕事に繋がっていく時に， たとえIT関連の仕事にならなかったとしても， 現在の時代ではどの産業においても必ずシステムに関する運用がありますので， システム開発の周りをしておくといつか必ず役に立つと思います。\n それでは，まず，ソフトウェア開発のプロセスから見てみましょう。\nソフトウェア開発のプロセスについて   プロジェクト開発する際に，どのようなソフトウェア開発手法を使っているかにもよりますが， 例えば，伝統的なウォーターフォール型開発手法の場合は， 開発プロセスが，需要分析，ソフトウェア設計，実装，テスト，メンテナンスになります。\n これによって，大学一年から身につけていたプログラミングの能力， それから，今期のソフトウェア工学の講義で勉強されているソフトウェア設計の基準と方法， また，それ以外も多くの授業から学んできたITに関連する知識など， どんどん活用すると皆さんのプロジェクトの周りの能力も高まります。\n プロジェクトよって他のアジャイル開発手法などが採用される場合はプロセスが異なりますが， 開発者やプロジェクトマネージャーに対して要求される能力はそれほど変わらないと思います。\n また，技術の発展が迅速であり，プロジェクト開発の際に， 授業を受けて勉強した知識以外も色んな技術が必要とされる時がたくさんあります。 その時に，必要に応じてプロジェクト開発と同時に， 興味を持って新しい技術を自分で勉強する必要があります。\n そんな時に，\n  なんのために勉強する（Why）\n  何を勉強する（What）\n  どのように効率よく勉強できる（How）\n  を考えながら勉強することが大事になります。\n 以下では，自分のある経験から，プロジェクト開発の際に， 必要とされる能力や気をつけた方が良いポイントについて話します。\n  TODO プロジェクトのバージョン管理   （また具体的な内容を追加）\n プロジェクトを始める前に，プロジェクトの需要やチームワークの構成によって， 開発言語を何にするか，開発に何のフレームワークを使うか， 何のデータベースを使うかなどを最初に決めなければなりません。\n これらを決めれば，実際にいろいろをやる前に， 共同開発・統一管理のできる環境を構築する必要があります。\nバージョン管理とは   まずは，「バージョン管理システム」についてウィキペディアに以下のように定義されています。\n バージョン管理システム（英: version control system、VCS）とは、 コンピュータ上で作成および編集されるファイルの変更履歴を管理するためのシステム。 特にソフトウェア開発においてソースコードの管理に用いられることが多い。 - ウィキペディア1\n  すなわち，バックアップに似ているものです。 ただし，バックアップだけの作業よりは，バージョン管理のほうがもっと繊細なもので， 誰が変更を行ったのか，いつに何を変更をしたのか，なぜ変更をしたかなどまできちんと記録されます。 これは，ソフトウェア開発のライフサイクルにおいても，とても重要なものです。\n バージョン管理のツールとしてよく知られているのはGitです。 Github，Gitlab或いはBitbucketなどを一度使ったことがあれば，多分Gitを触ったことがあるかと思います。 チームワークにおいてよくGitを利用できれば， チーム全体の開発作業がよくスムーズに進めると思われます。\n  TODO バージョン管理の必要性   バージョン管理はなぜ重要なのかと言いますと， プロジェクト開発する際にチームワークの知的財産である コードの有効的な管理・安全性を確保することができるからです。\n 規模の小さいプロジェクトやプログラミング練習だけならば， バージョン管理をしなくても良いと思われるかもしれませんが， 確かに場合によってしなくても達成する目的には影響を及ぼしませんが， プロジェクトの規模を問わずバージョン管理をして， 習慣として身に付けておくと， 実際のプロジェクトにおいてはスムーズに運用できます。\n    TODO プログラミングについて  ドキュメントを活用する   皆さんは，C言語などのプログラミング言語は学部一年の時に勉強したことがあると思います。 C言語でなんかのプログラムを書いたら， コンパイルが失敗したとかエラーになったとかの経験は誰でもあると思います。\n その時に，とてもシンプルな方法としては，そのエラーをネットで検索することで， 答えやヒントが得られる場合はあります。 ただし，ネットで調べても，なかなか自分のエラーに特定できない場合もあります。\n そんな時に，使われている言語のドキュメントにある関連な関数の定義・クラスの定義などを読むことで， 技術的にもどんどん重ねていき，問題の解決にも近づけます。\n ソフトウェア開発やプロジェクト開発においては， 必ずたくさんのツールやフレームワークを使うことになります。\n また，技術の迅速な発展に伴い，ツールやフレームワークを入れ替える時も常にあります。 この時に，ネットで検索しても，あなたがその問題に遭遇した最初の一人である可能性もあり， なかなか問題の解決にたどり着けない場合があります。 誰かに聞くか，開発者のコミュニティに質問を出すなども一つの方法ですが， これ以外もう一つ重要なのは，公式のドキュメントをうまく利用することです。\n ドキュメントを活用する習慣を身に着けると， 実際に開発の問題を解決することだけでなく， オープンソースへも自分の力を貢献できます。 なぜかと言いますと，エラーになったのは，必ずあなたが書いたコードの間違いではありません。 もしかしたらフレームワークのバグによるもので， この時に，使われているフレームワークがオープンソースで公開されているのであれば， このオープンソースプロジェクトチームの協力者の一員として活躍できます。 将来，会社で働いたら，会社に対しても貴重なチームワークの経験になります。\n  TODO 注釈を書く習慣をつける   コードを書くときに注釈を書くことが重要です。 良いプロジェクトの開発者たちは，通常では高凝集・低結合の理念で仕事を分けています。 これで，ソフトウェアがひとつひとつのモジュールに分割できて， それぞれの開発とメンテナンス作業ができます。 また，システムをアップグレードするときに， 古いモジュールや継続な開発しにくいモジュールを新しいもので入れ替えても全体に影響を及ぼすことはありません。 しかし，どうしても代替品がなく，古いモジュールの上で開発を続く必要がある場合があります。\n この時，コードを書いたメンバーがすでに離職や連絡を取れない場合でも， 他のチームメンバーが続いて開発できるようにするのは注釈です。 現在あるプロジェクトをアップグレードするときに， すべてのコードを理解する必要がありませんが， 重要なアルゴリズムや関数の箇所の修正は必ずコードを読んで理解した上で行う必要があります。\n コードを書くときに常に注釈をつけることが面倒だと思うのかもしれませんが， プロジェクトの将来のメンテナンスを考慮すると， つけたほうが将来が楽になりますし，チームワークにとっても効率的です。\n  TODO プログラミング言語   プログラミング言語がたくさんあります。 人によっては，興味のある言語と得意な言語，あるいはあまり慣れていない言語は必ず存在します。 しかし，ソフトウェア工学とプロジェクトの開発において， 言語の得意さにはそれほど気になる必要はありません。\n 学部一年で学んできたC言語の基礎があれば， あとはプログラミング言語をツールとして使い， ソフトウェア工学を生かせることです。\n    TODO サーバーの運用  TODO 自分のパソコンからサーバーのイメージを立てる   TODO セキュリティについて     TODO ウェブ開発  TODO ユーザインタフェース   TODO ユーザーフレンドリーについて   TODO バックエンドへの繋がり     プロジェクト開発ツールを活用する  開発環境に関するツール   開発環境としては，現在統合開発環境（IDE）2の製品がたくさんあります。 マイクロソフトのVisual Studio，あるいはよく知られているEclipseなどがあります。\n また，エディターにいろんなアドオンをインストールすることで， いろんなプログラミング言語のためのIDEにもなります。\n どんなIDEを使うは別として，開発を行う時にIDEがいろんな機能を提供してくるので， 慣れたら効率よくソフトウェア開発ができます。\n しかし，IDEに依存しすぎても良くないと思われます。 IDEは，プログラミング言語で書いたコードに対して， コンパイル・ビルド・デバッグの一連なことができます。\n その中に，コンパイルに対して，何のコンパイラーを内部で使われているか， ビルドに対して，何の設定で行なっているか， デバッグに対して，想定される動きになっているのかなどについては， IDEを使う場合は，わからないままに終わっている可能性があります。\n もちろん内部で何があったのかは分からなくても， 書いたプログラムがちゃんと働く場合が多いと思いますが， 問題はなんかあった場合です。\n 例えば，チームメンバーが異なるバージョンのIDEを使っているとします。 IDEにデフォルトでインストールされているプログラミング言語のコンパイラーも異なるバージョンの場合は， プログラミング言語の公式サイトで，すでに現在プロジェクトに使われているたくさんの関数をアップデートしたら， チームのメンバーの開発に支障が出てくる可能性が非常に高いです。\n これによって，チームワークにおいて開発環境を最新バージョンに統一するか， IDEが内部を行なっていることを理解した上，適切な設定を行う必要があります。 開発環境を揃えてうまく活用するとプロジェクトの開発効率がよくなりますが， 環境に依存しすぎてもダメです。 エディターとコンパイラーを分けて，それぞれ適切に管理するのもおすすめです。\n IDEやエディターは他のチームメンバーに使われているものを参照して選んでもよいですが， 個人の好みで自分が好きなものを使っても良いです。 この辺は例えばEmacsやVimなどがあります。\n  TODO その他   WindowsやmacOSのGUIだけではなくLinuxのコマンドも日常で触ること\n 一連の作業を自動化するためのスクリプトを作成してみること\n ショットカットをカスタマイズ・活用すること\n プロジェクトの進捗を何かのツールで管理すること\n プロジェクト開発の際に遭遇された問題点などログとして保存すること\n クラウドサービスを活用すること\n バックアップやバージョン管理を習慣として身につけること\n      1 バージョン管理システム - ウィキペディア\n  2 統合開発環境 - ウィキペディア\n    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":-62135596800,"objectID":"37864f6c7119983a9ba12d7b6555b380","permalink":"https://xinii.cf/ja/draft/se/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ja/draft/se/","section":"draft","summary":"目次 ソフトウェア開発のプロセスについて プロジェクトのバージョ","tags":null,"title":"ソフトウェア工学コースに関連するいくつかのポイント","type":"draft"},{"authors":null,"categories":null,"content":"  横浜市に住んでいます。僕のブログに来てくれて誠にありがとうございます。僕の履歴に興味がある方はこのページの紹介をご覧ください。\n 学歴  横浜国立大学    2016 年 10 月 - 2020 年 3 月\n 2016 年 5 月 に中国政府留学基金委員会による国費留学プログラムの資格を取得，\n 2016 年 10 月 に横浜国立大学大学院工学府 博士課程後期 物理情報工学専攻電気電子ネットワークコース に入学し，機械学習及び深層学習の応用に関する研究に従事，\n 2020 年 3 月 に博士（工学）の学位を取得。\n    東京国際大学    2014 年 4 月 - 2015 年 3 月\n 2014 年 4 月 に交換留学生として東京国際大学商学研究科 博士課程前期に入学し経営情報を専攻。\n 2015 年 3 月 に単位取得。\n    山西大学（中国）    2009 年 9 月 - 2016 年 7 月\n 2009 年 9 月 に山西大学に入学， 計算機情報技術学部でソフトウェアエンジニアリングを専攻し， 経済管理学部で工商管理を専攻。\n 2013 年 7 月 に工学・管理学学士学位取得。\n 2013 年 9 月 に山西大学大学院計算機情報技術研究科に入学， 2016 年 7 月 に工学修士学位取得。\n      研究及びソフトウェア開発  論文発表    李 欣, 新井 洋, and 濱上 知樹. 船型データの分布を考慮した深層学習による造波抵抗推定. 電気学会論文誌Ｃ（電子・情報・システム部門誌）, 140(3):391–397, 2020.\n   Available on DOI J-STAGE CiNii NDL Online      Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. Proceedings in Adaptation, Learning and Optimization, 12:93–105, 2020. （本文言語が英語）\n   Available on DOI Springer Link      Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. The papers of technical meeting on systems, IEE Japan, 2018(39):199–203, 2018. （本文言語が英語）\n   Available on CiNii NDL Online      Jinwei Wang and Xin Li. Multi-translation parallel corpus construction of don quixote. In Spanish Paper Series 2017, pages 4250–4423. Foreign Language Teaching and Researching Press, Beijing, 11 2018. （本文言語が中国語簡体字）\n   Available on Amazon Kindle Store      Jinwei Wang and Xin Li. An empirical study of oral communication strategies for foreign language students - taking spanish as an example. In Proceedings of the 11th Cross-Strait Foreign Language Teaching Symposium, pages 1–11. Fu Jen Catholic University Press, Taibei, 9 2016. （本文言語が中国語繁体字）\n   Available on Google Books        国際学会及び国内シンポジウム    Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. In Proceedings of the 23rd Asia Pacific Symposium on Intelligent and Evolutionary Systems, 2019.\n  Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. In The 28th Fuzzy, Artificial Intelligence, Neural Networks and Computational Intelligence, 2018.\n  Xin Li, Masaya Nakata, Hamatsu Fumiya, and Tomoki Hamagami. A research about anomaly detection method for multidimensional time series data. In The International Conference on Electrical Engineering, 2017.\n    ソフトウェア開発    2014 年 11 月：「顔認識及び音声認識に基づいた目の練習アプリ」中国国家特許局ソフトウェア著作権取得。 （記録番号：2014SR177728，ファイル番号：軟著登字第0846964号）\n  2014 年 9 月：「Bag-of-wordsに基づいた画像検索分類システム」中国国家特許局ソフトウェア著作権取得。 （記録番号：2014SR136257，ファイル番号：軟著登字第0805497号）\n  2014 年 5 月：「Androidに基づいた高解像度画像生成システム」中国国家特許局ソフトウェア著作権取得。 （記録番号：2014SR052862，ファイル番号：軟著登字第0722106号）\n      職歴及びインターンシップ  神奈川県横浜市    2020 年 4 月 - 現在\n 横浜国立大学大学院工学研究院，非常勤教員（ポスドク研究員）。\n  2019 年 4 月 - 2020 年 3 月\n 横浜国立大学理工学部，非常勤講師（電子情報システム基礎実験I，II）。\n  2017 年 4 月 - 2017 年 7 月\n 横浜国立大学大学院工学府，TA（プログラミング演習I）。\n    埼玉県川越市    2014 年 6 月 - 2015 年 2 月\n 株式会社セリア東武霞ヶ関店，アルバイト。\n    北京（中国）    2012 年 7 月 - 2012 年 9 月\n 中軟国際有限公司，インターンシップ。\n    山西省太原市（中国）    2013 年 4 月 - 2014 年 3 月\n 太原創成煥新科技有限公司，ソフトウェアプロジェクト及び業務管理。\n  2010 年 6 月 - 2010 年 8 月\n 太原優連科技有限公司，インターンシップ。\n      ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":-62135596800,"objectID":"93bc95849692d8039207b9333493b424","permalink":"https://xinii.cf/ja/cv/xin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ja/cv/xin/","section":"cv","summary":"横浜市に住んでいます。僕のブログに来てくれて誠にありがとうございます。僕の履歴に興味がある方はこのページの紹介をご覧ください。","tags":null,"title":"李 欣（り きん）","type":"cv"}]