[{
    "title": "ソフトウェア工学コースに関連するいくつかのポイント",
    "date": "2020-06-26",
    "description": "ソフトウェア工学コースに関連するいくつかのポイント",
    "body": " テスト   LLL テスト   HugoのコンテンツフォーマットにOrgを使うハナシ ",
    "ref": "/ja/blog/other/some-points-related-to-software-engineering-courses/"
  },{
    "title": "私について",
    "date": "2020-06-06",
    "description": "横浜市に住んでいる李欣です。僕のブログに来てくれて誠にありがとうございます。僕の履歴に興味がある方はこのページの紹介をご覧ください。",
    "body": " 学歴  横浜国立大学     2016 年 10 月 - 2020 年 3 月  2016 年 5 月 に中国政府留学基金委員会による国費留学プログラムの資格を取得，  2016 年 10 月 に横浜国立大学大学院工学府 博士課程後期 物理情報工学専攻電気電子ネットワークコース に入学し，機械学習及び深層学習の応用に関する研究に従事，  2020 年 3 月 に博士（工学）の学位を取得。   東京国際大学     2014 年 4 月 - 2015 年 3 月  2014 年 4 月 に交換留学生として東京国際大学商学研究科 博士課程前期に入学し経営情報を専攻。  2015 年 3 月 に単位取得。   山西大学（中国）     2009 年 9 月 - 2016 年 7 月  2009 年 9 月 に山西大学に入学， 計算機情報技術学部でソフトウェアエンジニアリングを専攻し， 経済管理学部で工商管理を専攻。  2013 年 7 月 に工学・管理学学士学位取得。  2013 年 9 月 に山西大学大学院計算機情報技術研究科に入学， 2016 年 7 月 に工学修士学位取得。   研究及びソフトウェア開発  論文発表     李 欣, 新井 洋, and 濱上 知樹. 船型データの分布を考慮した深層学習による造波抵抗推定. 電気学会論文誌Ｃ（電子・情報・システム部門誌）, 140(3):391–397, 2020.    Available on DOI J-STAGE CiNii NDL Online       Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. Proceedings in Adaptation, Learning and Optimization, 12:93–105, 2020. （本文言語が英語）    Available on DOI Springer Link       Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. The papers of technical meeting on systems, IEE Japan, 2018(39):199–203, 2018. （本文言語が英語）    Available on CiNii NDL Online       Jinwei Wang and Xin Li. Multi-translation parallel corpus construction of don quixote. In Spanish Paper Series 2017, pages 4250–4423. Foreign Language Teaching and Researching Press, Beijing, 11 2018. （本文言語が中国語簡体字）    Available on Amazon Kindle Store       Jinwei Wang and Xin Li. An empirical study of oral communication strategies for foreign language students - taking spanish as an example. In Proceedings of the 11th Cross-Strait Foreign Language Teaching Symposium, pages 1–11. Fu Jen Catholic University Press, Taibei, 9 2016. （本文言語が中国語繁体字）    Available on Google Books      国際学会及び国内シンポジウム     Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. In Proceedings of the 23rd Asia Pacific Symposium on Intelligent and Evolutionary Systems, 2019.    Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. In The 28th Fuzzy, Artificial Intelligence, Neural Networks and Computational Intelligence, 2018.    Xin Li, Masaya Nakata, Hamatsu Fumiya, and Tomoki Hamagami. A research about anomaly detection method for multidimensional time series data. In The International Conference on Electrical Engineering, 2017.   ソフトウェア開発     2014 年 11 月：「顔認識及び音声認識に基づいた目の練習アプリ」中国国家特許局ソフトウェア著作権取得。 （記録番号：2014SR177728，ファイル番号：軟著登字第0846964号）    2014 年 9 月：「Bag-of-wordsに基づいた画像検索分類システム」中国国家特許局ソフトウェア著作権取得。 （記録番号：2014SR136257，ファイル番号：軟著登字第0805497号）    2014 年 5 月：「Androidに基づいた高解像度画像生成システム」中国国家特許局ソフトウェア著作権取得。 （記録番号：2014SR052862，ファイル番号：軟著登字第0722106号）   職歴及びインターンシップ  神奈川県横浜市     2020 年 4 月 - 現在  横浜国立大学大学院工学研究院，非常勤教員（ポスドク研究員）。    2019 年 4 月 - 2020 年 3 月  横浜国立大学理工学部，非常勤講師（電子情報システム基礎実験I，II）。    2017 年 4 月 - 2017 年 7 月  横浜国立大学大学院工学府，TA（プログラミング演習I）。   埼玉県川越市     2014 年 6 月 - 2015 年 2 月  株式会社セリア東武霞ヶ関店，アルバイト。   北京（中国）     2012 年 7 月 - 2012 年 9 月  中軟国際有限公司，インターンシップ。   山西省太原市（中国）     2013 年 4 月 - 2014 年 3 月  太原創成煥新科技有限公司，ソフトウェアプロジェクト及び業務管理。    2010 年 6 月 - 2010 年 8 月  太原優連科技有限公司，インターンシップ。   ",
    "ref": "/ja/about/"
  },{
    "title": "Windows 10をクリーンインストールした後の作業",
    "date": "2020-06-04",
    "description": "この記事はWindows 10をクリーンインストールした後のいくつかの作業を紹介する。Windowsの使用には必須ではないけど，僕にとってはより効率的な仕事のために必ず入れておくのでエンジニアにはお勧め。",
    "body": " Windows 10のアクティベーション   cmd を開く slmgr -ipk {your product key} slmgr -skms {kms server address of your company} slmgr -ato  いくつか便利のツールをインストールする     Msys2    AutoHotKey    Ricty   msys2を設定する  pacman -S git fish tmux emacs gcc python cd ~ git clone https://github.com/xinii/xinconfig .xinconfig cd .xinconfig ./setenv fish exec fish set_conf tmux set_el auto set_el cn change_emacs xin emacs ssh-keygen -A emacs /etc/ssh/sshd_config #Port **** #PasswordAuthentication no cat {path to your pub key} \u0026gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh /usr/bin/sshd  ",
    "ref": "/ja/blog/windows/some-installations-for-windows-10/"
  },{
    "title": "より効率的な作業を行うためのいくつかWindowsのレジストリー設定",
    "date": "2020-06-04",
    "description": "Windowsのシステム環境設定だけではなかなか叶えない機能だけど，重くなるのでサードパーティ製のソフトウェアも使いたくない？レジストリーを使いこなそう！",
    "body": " 日本語キーボードのレイアウトに関するレジストリー設定  スキャンコードについて   まずは，ウィキペディアに載せたスキャンコードの定義を見よう   スキャンコード (scancode) とは、コンピュータのキーボードのキーが押されたり離されたりしたときに、 キーボードからCPUに送られるコード（符号）のこと。走査コード（そうさコード）ともいう。 - Wikipedia  スキャンコードの例1     キー コード     RCtrl 1D E0   LAlt 38 00   RAlt 38 E0   ESC 01 00   Insert 52 E0   Enter 1C 00   Caps 3A 00   Space 39 00   無変換 7B 00   変換 79 00    レジストリーでスキャンコードのマッピングを行うためには     まず， Win key + R を押して regedit を入力したら Enter キーを押す。 そうすると，Windowsのレジストリーエディターが開かれたはず。 そこでレジストリーエディターで以下の場所を開く。 コンピューター\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout     次に，右クリックしたら，「新規 - バイナリ値(B) - Scancode Map」の順に「Scancode Map」というバイナリキーを作る。  「Scancode Map」のバリュー（マッピングのルール）については， 以下のような僕の設定を参考していじってみればいいと思う。 ただし，「バージョン」，「フラグ」と「終端ヌル値」の部分は残る必要がある。 あと，「マッピング数」については，「終端ヌル値」も含めて設定したマッピングルールの数を数えて書けば良い。    Logicool K380のための自分用レイアウト    Index Scancode 意味 Scancode 意味     0000 00 00 00 00 バージョン 00 00 00 00 フラグ   0008 08 00 00 00 マッピング数 1D 00 3A 00 LCtrl \u0026lt;- Caps   0010 3A 00 1D 00 Caps \u0026lt;- LCtrl 1D E0 38 00 RCtrl \u0026lt;- LAlt   0018 38 00 7B 00 LAlt \u0026lt;- 無変換 38 E0 70 00 RAlt \u0026lt;- かなキー   0020 39 00 79 00 Space \u0026lt;- 変換 01 00 38 E0 ESC \u0026lt;- RAlt   0028 00 00 00 00 終端ヌル値         FILCO Majestouch MINILA Airのための自分用レイアウト    Index Scancode 意味 Scancode 意味     0000 00 00 00 00 バージョン 00 00 00 00 フラグ   0008 0B 00 00 00 マッピング数 1C 00 52 E0 Enter \u0026lt;- Insert   0010 1D E0 38 00 RCtrl \u0026lt;- LAlt 1D E0 70 00 RCtrl \u0026lt;- かな   0018 7B 00 46 00 無変換 \u0026lt;- ScrLk 79 00 1D E1 変換 \u0026lt;- Pause   0020 00 00 45 00 なし \u0026lt;- NumLock 00 00 9D E1 なし \u0026lt;- Break   0028 38 00 7B 00 LAlt \u0026lt;- 無変換 01 00 79 00 ESC \u0026lt;- 変換   0030 52 E0 29 00 Insert \u0026lt;- E/J 00 00 00 00 終端ヌル値       ここで，「Pause/Break」がいつくかのコードで組み合わせたもので， 「NumLock」のコードも入っているため， 以上のように設定する時に少し工夫をした。 以下も参考   Pause 0xE1:0x1D:0x45 [ 84key Ctrl (0x1D) + NumLock (0x45)], no auto repeat, break code 0xE1:0x9D:0xC5 - Keyboard Scancode Map    キーボードレイアウトの種類を変更  中国語入力において英語配列から日本語配列に     まずは，レジストリーエディターで以下の場所を開く コンピューター\\HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Keyboard Layouts\\00000804     次に，以下のように変更をする    キーの名前 変更前 変更後     Layout File KBDUS.DLL KBD106.DLL      他の言語の入力法において〇〇配列から〇〇配列に     他の言語の入力法の場合は，レジストリーのパスの=00000804=のところを変更し， 変更後の=***.DLL=の部分に適切な内容で入れ替えたら良いと思う。   「マイコンピュータ」や「PC」の画面に不明なアイコンが出た時のレジストリー設定     以下のレジストリーのパスに，その不明なものを探して見つけたら見つけたものを削除すれば良い コンピューター\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace    どうしてもローカルネットワークのNASとかに繋がらない時のレジストリー設定2     まずは，以下の場所を開く コンピューター\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters     次に，下のような変更を行う    キーの名前 変更前 変更後     AllowInsecureGuestAuth 0 1      参考資料     上書きモードになる『Insert』キーを無効化する方法    Scancode Mapによるキー割り当ての変更    Homegroup removed! How to get network sharing work with Windows 10 v1803   1  スキャンコード一覧（スキャンコードセット1）   2  NASに接続できない！原因はSMB1.0ではなかった！     ",
    "ref": "/ja/blog/windows/several-windows-registry-configurations/"
  },{
    "title": "FishとEmacsのためのaptリポジトリ追加",
    "date": "2020-06-03",
    "description": "Emacs26をインストールしたいけどaptのアップグレードが効かない？この記事の方法を見てみて",
    "body": " 使う予定のコマンド  add-apt-repository  このコマンドがない？以下のようにコマンドを入れる  apt install software-properties-common  以下のステップに従ってインストール  リポジトリを登録  add-apt-repository ppa:kelleyk/emacs apt-add-repository ppa:fish-shell/release-3  リポジトリを更新  apt update  必要なものをインストール  apt install emacs26 apt install fish  ",
    "ref": "/ja/blog/linux/add-apt-repository-for-fish-and-emacs/"
  },{
    "title": "いくつかのssh設定",
    "date": "2020-06-03",
    "description": "sshの途切れる現象に腹立つ？アンドロイドのtermux使ってsshサーバーを建てたい？この記事を読もう！",
    "body": " sshの途切れる現象     sshを使ってリモートサーバーにログインしている時に，一定の時間内に操作がなければ， =Write failed: Broken pipe=というエラーが出てきてしまう可能性がある。    以上のことを避けるために，クライアント側やサーバー側のssh設定を変える必要がある。 やり方     クライアント側で対処する    以下の内容を=/etc/ssh/ssh_config=か=~/.ssh/config=に記述する。 ServerAliveInterval 15 ServerAliveCountMax 10   この設定は，15秒ごとに10回の応答が送信されることを意味する。 それでも応答がなければ接続が切断される。    サーバー側で対処する    以下の内容を=/etc/ssh/sshd_config=に記述する。 ClientAliveInterval 30 ClientAliveCountMax 5   この設定は，30秒ごとに5回の応答が送信されることを意味する。 それでも応答がなければ接続が切断される。 その他   sshを使う際にtmuxやscreenなどを使うことがおすすめ。 これで，リモートへの接続が途切れたとしても， リモートに再びログインした後にすでにあるセッションにattachすれば元の環境が戻ってくる。 アンドロイドのtermuxアプリを使ってsshデーモンを立てる  インストール  apt install openssh  キーを設定する  ssh-keygen cat ~/.ssh/id_rsa.pub \u0026gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh  デバッグモードをデーモンを起動  sshd -d  デーモンを起動  sshd  パソコンで立てたデーモンにログイン   アンドロイドで生成されたプライベートキー=~/.ssh/id_rsa=をパソコン側のsshクライアントに設定し， アンドロードのipアドレスにポート=8022=を加えてユーザ名なしで接続すれば良い。 ",
    "ref": "/ja/blog/ssh/several-ssh-configurations/"
  },{
    "title": "EmacsのOrg-modeにおいてPythonコードブロックを使った時の落とし穴",
    "date": "2019-11-23",
    "description": "EmacsのOrg-modeが必要に便利なツールで，そのままコードをコンパイルできることが魅力的。ただPythonを使う際に落とし穴がある，一緒に見てみよう！",
    "body": " 僕は家計簿をOrg-modeで記録しています， しかし，以下のエラーが出たことがある。 File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 3 SyntaxError: Non-UTF-8 code starting with \u0026#39;\\xe3\u0026#39; in file \u0026lt;stdin\u0026gt; on line 3, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details   例の # -*- coding: utf-8 -*- を先頭につけてもダメです。  解決法は以下のようなコードブロックのヘッダーを， #+begin_src python :results file :var data=test   以下のように変換します。 #+begin_src python :results file :var data=test[, 0:2]   つまり，必要な数字や日付などのorg-modeのtableの列だけを pythonに転送すると，以上の問題が解決できますが， 根本的に # -*- coding: utf-8 -*- をコードブロックの中に 効く方法はまだわかりません。 わかる方は教えていただければありがたいと思います。 ",
    "ref": "/ja/blog/other/pitfall-while-using-python-code-block-on-emacs-org-mode/"
  },{
    "title": "LaTeXのplatexを使う際のfigureに関する落とし穴",
    "date": "2019-11-23",
    "description": "LaTeXのplatexを使う際に，グラフのスケールによってコンパイルが失敗してしまう可能性があるので，注意しよう！",
    "body": " platexを使う際に， epsが問題がないが， なぜかそのepsを入れたらビルドが失敗。  しかも失敗した時のログをみると， なかなか問題がわからない。  例えば，全ての入れたfigureの定義が見つからないなどのレポート。 その時に，epsを正方形に近い形状を 矩形にしたら，問題が解決できた。 原因はまだ不明。 たまにこのようなことがあるので， 結構ハマったので，一応記録を ",
    "ref": "/ja/blog/other/pitfall-while-inserting-figure-into-latex-article/"
  },{
    "title": "EmacsとLilypondで楽譜生成",
    "date": "2019-11-16",
    "description": "楽譜作成アプリに飽きた？EmacsとLilypondで楽譜と遊ぼう！",
    "body": " コード例  \\version \u0026#34;2.18.2\u0026#34; \\score { \\new Staff \u0026lt;\u0026lt; \\new Voice \\relative c\u0026#39;\u0026#39;\u0026#39; { \\set midiInstrument = #\u0026#34;flute\u0026#34; \\voiceOne \\key g \\major \\time 2/2 r2 g-\u0026#34;Flute\u0026#34; ~ g fis ~ fis4 g8 fis e2 ~ e4 d8 cis d2 } \\new Voice \\relative c\u0026#39;\u0026#39; { \\set midiInstrument = #\u0026#34;clarinet\u0026#34; \\voiceTwo b1-\u0026#34;Clarinet\u0026#34; a2. b8 a g2. fis8 e fis2 r } \u0026gt;\u0026gt; \\layout { } \\midi { \\context { \\Staff \\remove \u0026#34;Staff_performer\u0026#34; } \\context { \\Voice \\consists \u0026#34;Staff_performer\u0026#34; } \\context { \\Score tempoWholesPerMinute = #(ly:make-moment 72 2) } } }  出力例   asdf ",
    "ref": "/ja/blog/other/generate-sheet-music-with-lilypond-on-emacs/"
  },{
    "title": "絶対音感について",
    "date": "2019-11-15",
    "description": "絶対音感に関する紹介とそれに関する考察を見てみよう！",
    "body": " 音階と音の周波数   次の表に，ピアノの鍵盤における88のキーに相応する音の周波数を示す。    鍵盤番号 周波数(Hz) 階名 音名     1 27.500 ラ A0（イ）   …      37 220.000 ラ A3（イ）   38 233.082  A#3   39 246.942 シ B3（ロ）   40 261.626 ド C4（ハ）   41 277.183  C#4   42 293.665 レ D4（ニ）   43 311.127  D#4   44 329.628 ミ E4（ホ）   45 349.228 ファ F4（ヘ）   46 369.994  F#4   47 391.995 ソ G4（ト）   48 415.305  G#4   49 440.000 ラ A4（イ）   50 466.164  A#4   51 493.883 シ B4（ロ）   52 523.251 ド C5（ハ）   …      88 4186.009 ド C8（ハ）     音の周波数を等比数列\\(a_0, a_1, a_2 \\dots a_{12}\\)とし， 公比を\\(r\\)とすると，以下の関係がある。  \\[a_{12} = a_{0} \\times r^{12} = a_0 \\times 2\\]  また，1オクターブの二つの音の周波数が2倍の関係なので， 以下の式によって公比\\(r\\)がわかるようになる。  \\[r^{12} = 2 \\Rightarrow r = \\sqrt[12]{2} \\approx 1.059463094\\]  従って，任意の音に対して，\\(n\\)個半音上の音を計算する方法は以下の式に示す。  \\[a_n = a_0 \\times r^n = a_0 \\times 2^{\\frac{n}{12}}\\]  以上によると，絶対音感を持っている人が， 任意の一つの音を聞いて，その周波数がわかる。 具体的な数値がわからなくても， その数値は必ず一つの音名に相応するので，音名がわかる。 これに対して，相対音感が\\(a_0\\)が必要である。 また，音名が固定だが，階名が変化するものである。 \\(a_0\\)を任意の音を指定しておく前提なら， 耳の感覚で，他の音を計算するものである。  絶対音感が，5歳くらいまでにトレーニングしないと， 身に着けにくくなるとよく言われている。 これはなぜだろうか。 母国語に似ているものなので， この視点から分析してみる。 絶対音感を身に着けるにはなぜ5歳までトレーニングする必要があるか   ここで，まずいくつかの言語の例をあげてみたい。    言語に関する時間    言語に関する意味    言語に関する発音    （未完成… 時間がある時に続いて書く） ",
    "ref": "/ja/blog/other/about-absolute-pitch/"
  },{
    "title": "Jetson NanoにOpenCVをインストール",
    "date": "2019-07-12",
    "description": "Jetson NanoにOpenCVをインストールする際に少し工夫する必要があるかもしれない，一緒に見てみよう！",
    "body": " swapファイルを生成   コンパイル途中にメモリー不足などの問題を防ぐため， swapという交換用ファイルを任意のパスに生成しておく。 このファイルは，OS再起動の後に自動的に消えるが， 全てのインストールが終わったら，手作業で交換用ファイルを削除しても良い。 $ fallocate -l 4G swapfile $ chmod 600 swapfile $ mkswap swapfile $ sudo swapon swapfile $ swapon -s  インストールのスクリプトを生成   OpenCV 4.0.0をインストールためのリンク  以上は，OpenCV 4.0.0をインストールためのリンクで，ここでは，OpenCV 4.1.0をインストールしたいため， バージョン番号の部分に少し手を加える。 #!/bin/bash # # Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved. # # NVIDIA Corporation and its licensors retain all intellectual property # and proprietary rights in and to this software, related documentation # and any modifications thereto. Any use, reproduction, disclosure or # distribution of this software and related documentation without an express # license agreement from NVIDIA Corporation is strictly prohibited. # if [ \u0026#34;$#\u0026#34; -ne 1 ]; then echo \u0026#34;Usage: $0\u0026lt;Install Folder\u0026gt;\u0026#34; exit fi folder=\u0026#34;$1\u0026#34; user=\u0026#34;nvidia\u0026#34; passwd=\u0026#34;nvidia\u0026#34; echo \u0026#34;** Install requirement\u0026#34; sudo apt-get update sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev sudo apt-get install -y python2.7-dev python3.6-dev python-dev python-numpy python3-numpy sudo apt-get install -y libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev sudo apt-get install -y libv4l-dev v4l-utils qv4l2 v4l2ucp sudo apt-get install -y curl sudo apt-get update echo \u0026#34;** Download opencv-4.1.0\u0026#34; cd $folder curl -L https://github.com/opencv/opencv/archive/4.1.0.zip -o opencv-4.1.0.zip curl -L https://github.com/opencv/opencv_contrib/archive/4.1.0.zip -o opencv_contrib-4.1.0.zip unzip opencv-4.1.0.zip unzip opencv_contrib-4.1.0.zip cd opencv-4.1.0/ echo \u0026#34;** Building...\u0026#34; mkdir release cd release/ cmake -D WITH_CUDA=ON -D CUDA_ARCH_BIN=\u0026#34;5.3\u0026#34; -D CUDA_ARCH_PTX=\u0026#34;\u0026#34; -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.0/modules -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python2=ON -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. make -j3 sudo make install sudo apt-get install -y python-opencv python3-opencv echo \u0026#34;** Install opencv-4.1.0 successfully\u0026#34; echo \u0026#34;** Bye :)\u0026#34;   以上のスクリプトを=sh=ファイルとして保存する。例えば=install_opencv4.1.0_Nano.sh=。 スクリプトを実行する  mkdir opencv sh install_opencv4.1.0_Nano.sh opencv   インストールのプロセスが割と時間かかるため，インストールが終わるまで待つ。 ここで，tmuxとかに任せてバックグラウンドでやれば，なんかあった時にattachすれば済むのでおすすめ。 インストールされたOpenCVをテスト   コマンドラインに=python=を叩くと=import cv2=をためしたらエラーがなければ終わり。  ただ，pyenvなどのpython環境管理ツールを使っている方なら， pyenvを使って入れたpythonにおいてはOpenCVを読み込めない場合がある。 解決案としては，OpenCVのライブラーのソフトリンクをpyenvのpythonの下に置くこと。  例えば，以下のようなpyenvのpythonのライブラリーのパスがある。 /home/{username}/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages   また，インストールされたOpenCVのライブラリーのパスが以下となる。 /usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so   この場合は，以下のコマンドでソフトリンクを作れる。 cd /home/{username}/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages ln -s /usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so ./   また，事前にpyenvのpythonのpipを使って， =pip install numpy=でnumpyを入れておくと さっきのように=import cv2=でテストしてエラーがなければおしまい。 ",
    "ref": "/ja/blog/opencv/install-opencv-on-jetson-nano/"
  },{
    "title": "GnutlsをインストールしてソースからEmacsをコンパイル",
    "date": "2019-05-04",
    "description": "ソースからEmacsをコンパイルする時にGnutlsに関するエラーが出た？一体どういうことかを見てみよう！",
    "body": " 今の環境にGnutlsがない場合   今の環境にGnutlsがない場合は，ソースからEmacs1をコンパイルする時に以下の設定が必要。 ./configure --with-gnutls=no   他にも依存されるライブラリーなどが足りない場合は，例えば以下のように設定をする。 bash configure --prefix=$HOME/.local --with-gif=no --with-gnutls=no   これでデフォルトのパスとかへの権限や，ライブラリーが足りない場合でもソースからインストール出来てしまう。 潜在的なリスク   以上のようにEmacsを $HOME/.local へのインストールが出来てしまうけど， Gnutlsがサポートされないゆえに，Emacsでインターネットが必要となった時にhttpsが使えない。  Emacsが初期化される時だけなら，設定ファイルの中のMelpaリンクを全てhttpに変更すれば済ませるが， セキュリティ上にあまりお勧めができないし，今後Emacsの拡張機能を使う時のリスクにもなる。  例えば， google-translate のEmacs拡張パッケージを使う場合は， Emacsのelpaフォルダーにある google-translate の中の全ての *.el にある https を http に書き換えても， 実際に使う時に一部の機能にとっては https が必須で翻訳が正常に機能しない恐れがある。  ここでは， *.el を変更した後に， *.elc を削除しないと変更が反映されない可能性がある。 Gnutlsをインストール   以上の問題を解決するもっとも簡単な方法としては， 今の環境にGnutlsをインストールしてからソースからもう一度Emacsをインストールすること。  OpenSUSEを例として，以下のコマンドでGnutlsをインストールする。 sudo zypper install gnutls  その他の問題  checking for library containing tputs... no configure: error: The required function \u0026#39;tputs\u0026#39; was not found in any library. The following libraries were tried (in order): libtinfo, libncurses, libterminfo, libcurses, libtermcap Please try installing whichever of these libraries is most appropriate for your system, together with its header files. For example, a libncurses-dev(el) or similar package. make: *** No targets specified and no makefile found. Stop. make: *** No rule to make target \u0026#39;install\u0026#39;. Stop.   もしすでにGnutlsがインストール済みで， make を叩くと以上のエラーが出てきてしまったら， OpenSUSE環境の場合は， ncurses-devel というパッケージが必要だということなので， 以下のコマンドで入れておこう。 sudo zypper install ncurses-devel  1  The logo of Emacs     ",
    "ref": "/ja/blog/emacs/install-gnutls-and-compile-emacs-from-source/"
  },{
    "title": "僕のシェル移行記録",
    "date": "2019-05-03",
    "description": "bash - zsh - fish",
    "body": " bashからzshに   虽然我使用zsh shell两周后就换到fish shell了（关于fish shell下面有专门介绍）， 但这并不否认zsh shell仍然是个很好的shell。 你可以通过下面的方式从任意的shell切换至zsh shell。    安装zsh时通过下面的指令：   brew install zsh (MacOS) apt install zsh (Ubuntu / Linux Mint)     如果你想要知道现在系统裡已经安装好的shell，输入下面的指令：   cat /etc/shells     如何将zsh作为你默认的shell呢？，输入下面的指令：   chsh -s /usr/local/bin/zsh     关于配置文件的读取错误    shell脚本解释出错时可以查看一下当前所使用的=sh=路径， 比如有可能是=sh=指向了=dash=导致出错。 通过下面的语句查看。 ls -l `which sh`     脚本解释器在语法上的不同点    从传统的bash等shell换到zsh时会发现集合的第一个元素的索引是从1开始的， 如果希望从0开始，在配置文件中配置下面语句即可。    Fix array index for zsh:   if [ \u0026#34;$ZSH_NAME\u0026#34; = \u0026#34;zsh\u0026#34; ];then setopt localoptions ksharrays fi  配置zsh shell   与bash shell的=.bashrc=类似，=zsh=的配置也需要一个配置文件， 这个文件是在用户目录下的=.zshrc=文件，点击 这里 打开我上传到=Github=的配置文件下载使用。 zshからfishに   使用zsh shell之后大概两週我就换到fish shell了， 这不是因为zsh不好，而是fish天然的完成度和易用性吸引了我， 转移到fish环境后，有关shell折腾算是告一段落，以下对该过程纪录。 fish shell的安装以及默认shell的切换   这个上面提到过，这裡具体针对不同的操作系统所需要执行的指令进行介绍。    MacOS:   brew install fish     Ubuntu/Linux Mint:   apt install fish     OpenSUSE:   sudo zypper install fish   如果需要=root=权限，例如你是运行在Windows下的OpenSUSE环境， 则默认需要=root=权限，则前面加=sudo=。 通过下面的语句查看当前系统所使用的shell： cat /etc/shells   如果显示你的fish shell在=/usr/bin/fish=， 那麽执行下面的语句切换其为默认shell（权限不足则补充=sudo=）： chsh -s /usr/bin/fish   现在重新打开一个终端会话会发现默认shell已经切换到fish了。 如果打开fish shell后马上报很多关于hostname的错， 也就是说当前环境缺少一个叫做hostname的包， 那麽使用你所使用的发行版的包管理器安装=hostname=， 例如在OpenSUSE下使用： sudo zypper install hostname  fish的配置   我写好的配置上传在了Github，点击 这里 查看我的配置。 在fish shell下使用python时的常见问题   目前我遇到的比较需要注意的问题有下面两点：    关于tmux    tmux在后台存在session的时候， 即使更新=PYTHONPATH=环境变量也不会生效， 此时需要关闭tmux的所有进程，更新才会生效。 除fish以外其他shell环境应该也会遇到， 我是在fish首次出现，留作纪录。    关于PYTHONPATH    fish shell中定义环境变量的方式为 set \u0026lt;variable_name\u0026gt; \u0026lt;parameter_1\u0026gt; \u0026lt;parameter_2\u0026gt; 这种方式有很大的优越性而且非常方便， 然而对于=PYTHONPATH=， 则=set PYTHONPATH \u0026lt;parameter_1\u0026gt;:\u0026lt;parameter_2\u0026gt;=的方式更具有通用性。 原因为，经过测试在MacOS下两种方式均可正常使用， 但在运行在Jetson Nano上的Ubuntu下测试时，只有第二种方式可用。 具体原因尚未明确，有可能时操作系统不同的原因， 也可能是python版本不同造成的 （比如版本号相同，但处理器架构不同造成了编译方式的差异导致该问题）。 ",
    "ref": "/ja/blog/shell/my-shell-migration-record/"
  },{
    "title": "USBデバイスからLinux Mintをインストール",
    "date": "2019-04-23",
    "description": "USBデバイスからLinux Mintをインストール",
    "body": "  *重要*：在开始下面的工作之前，首先确保U盘没有存任何东西， 或者里面没有放任何的重要数据（因为烧录会导致数据丢失）， 同时电脑上已经准备好空的分区（安装到的目标分区的数据也会被抹掉）。 Linux Mint1をインストールするためのUSBデバイスを用意する   首先准备一个usb设备，可以是u盘也可以是usb的移动硬盘， 之后会在这个上面写入供安装linux mint的安装程序。    如果使用的是windows操作系统，那么点击 这里 来查看ubuntu官方的教程以创建一个可以安装Linux的USB设备。    *注意*：上面的教程是教你如何製作一个用于安装Ubuntu的USB设备， 安装linux mint的情况下仅需要把涉及到iso文件的地方换成Linux Mint的iso文件，其他地方完全相同。    其中会用到的软件叫做rufus，上面的教程裡面也有提到，点击 这里 打开rufus的官方网站，你也可以点击 这里 直接下载rufus。   Linux MintのISOファイル   前一节提到的linux mint的iso文件需要从下面的地方获取。点击 这里 打开linux mint的官方网站。 或者也可以点击 这里 直接下载Linux Mint 19.1版本。 1  Linux MintのLogo     ",
    "ref": "/ja/blog/linux/install-linux-mint-from-the-usb-device/"
  },{
    "title": "Jekyllで作成したブログをGithubに公開",
    "date": "2019-04-02",
    "description": "自分のブログがほしいけどやり方はわからない？GithubがデフォルトでビルドとかをサポートしているJekyllを試してみよう！",
    "body": " Jekyll1をインストール   JekyllがRubyで書いた静的なサイトジェネレーター。 以下は公式サイトの紹介文。   Jekyll is a static site generator. You give it text written in your favorite markup language and it uses layouts to create a static website. You can tweak how you want the site URLs to look, what data gets displayed on the site, and more. –Jekyll2   Jekyllをインストールする際に， まずはRubyのパッケージ管理ツールを入れておくとあとは便利。 よく使われているRubyのパッケージ管理ツールが gem で， Ubuntuなどのシステムにおいて， 以下のコマンドで gem が同時にインストールされる。 apt install ruby-dev   gem をインストールして， PATH の環境変数にちゃんと gem が入っていれば， gem を使っていろんなRubyのパッケージを入れることが可能になる。 もし rbenv などのバーチャル環境管理ツールを使っていれば， 実行可能な gem があればあとは同じ。 以下のコマンドでJekyllを入れる。簡単だね。 gem install jekyll  Githubに公開   Jekyllをインストールしたら， とりあえずJekyllで作った何かしらをGithubに公開して見てみたいだね。 気持ちがわかる。  そうしたら，記事などを色々書き始める前に，空のブログを一旦Githubに公開しよう！ まずローカルでブログを管理したい場所に以下のコマンドを叩く。 jekyll new folder-name-for-your-blog   そうすると，カレントフォルダーに folder-name-for-your-blog という名前のサブフォルダーが出来てしまう。  そして，Githubのリポジトリのページにおいて， your-user-name-of-github.github.io という名前のリポジトリを作っておく。  新しいリポを作ったら， git でどう push するかとかのヒントが出てくると思うので， それに従ってさっき作った folder-name-for-your-blog フォルダーの内容を your-user-name-of-github.github.io に push すればおしまい。  数分後に，ブラウザを使って your-user-name-of-github.github.io にアクセスしてみれば， 何かしらのJekyllページが出てくるはず。  このブログでも以上の方法で作っている。  （2020年6月14日追記）  このブログは現在 hugo という静的なサイトジェネレーターで作っている。  古いブログを参考していただく場合は，ここをクリックしてください。  それでは。 1  JekyllのLogo   2  jekyllrb.com     ",
    "ref": "/ja/blog/cms/create-a-blog-by-jekyll-and-publish-to-github/"
  },{
    "title": "お問い合わせ",
    "date": "0001-01-01",
    "description": "",
    "body": "",
    "ref": "/ja/contact/"
  }]
