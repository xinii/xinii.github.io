[{
    "title": "关于我",
    "date": "June 6, 2020",
    "description": "李欣，现居日本神奈川县横滨市。欢迎来到我的博客，以下是我的简单介绍。",
    "body": "教育经历 日本横滨国立大学   2016 年 10 月 - 2020 年 3 月\n2016 年 5 月获国家留学基金管理委员会「国家建设高水平大学公派研究生项目」公派留学资格。 同年 10 月入学横滨国立大学大学院工学府博士课程后期物理情报工学专攻，研究机器学习、深度学习与人工智能应用等领域。 2020 年 3 月毕业并获工学博士学位。\n  日本东京国际大学   2014 年 4 月 - 2015 年 3 月\n2014 年 4 月以交换留学生身份入学东京国际大学大学院商学研究科进行经营情报专业博士课程前期的学习， 于 2015 年 3 月完成交换留学项目。\n  中国山西大学   2009 年 9 月 - 2016 年 7 月\n2009 年 9 月入学山西大学本科，在学期间于计算机与信息技术学院主修软件工程专业、于经济与管理学院辅修工商管理专业， 2013 年 7 月毕业并获工学、管理学学士学位。 同年 9 月保送本校硕士研究生，2016年7月毕业并获软件工程专业硕士学位。\n  科研及软件著作 期刊及论文出版情况   Xin Li, Hiroshi Arai, and Tomoki Hamagami. Wave-making resistance estimation through deep learning considering the distribution of ship figure. IEEJ Transactions on Electronics, Information and Systems, 140(3):391\u0026ndash;397, 2020. （论文正文为日语； DOI， CiNii， NDL Online）\n  Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. Proceedings in Adaptation, Learning and Optimization, 12:93\u0026ndash;105, 2020. （论文正文为英语； DOI）\n  Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. The papers of technical meeting on systems, IEE Japan, 2018(39):199\u0026ndash;203, 2018. （论文正文为英语； CiNii， NDL Online）\n  王 晋炜 and 李 欣. 《唐吉诃德》一语多译平行语料库构建设想. In 西班牙语论丛2017, pages 4250\u0026ndash;4423. 外语教学与研究出版社, 北京, 11 2018. （Amazon kindle store）\n  王 晋炜 and 李 欣. 外語專業學生口語交際策略實證研究-以西班牙語為例. In 第十一屆海峽兩岸外語教學研討會論文集, pages 1\u0026ndash;11. 輔大書坊, 台北, 9 2016. （论文正文为繁体中文； Google books）\n  学术会议   Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. In Proceedings of the 23rd Asia Pacific Symposium on Intelligent and Evolutionary Systems, 2019.\n  Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. In The 28th Fuzzy, Artificial Intelligence, Neural Networks and Computational Intelligence, 2018.\n  Xin Li, Masaya Nakata, Hamatsu Fumiya, and Tomoki Hamagami. A research about anomaly detection method for multidimensional time series data. In The International Conference on Electrical Engineering, 2017.\n  软件著作   2014 年 11 月：软件「基于人脸识别和语音识别的眼保健操软件」获国家版权局计算机软件著作权登记证书。 （登记号：2014SR177728，证书号：软著登字第0846964号）\n  2014 年 9 月：软件「基于词袋模型的图像检索与分类系统」获国家版权局计算机软件著作权登记证书。 （登记号：2014SR136257，证书号：软著登字第0805497号）\n  2014 年 5 月：软件「基于Android的高清图像生成系统」获国家版权局计算机软件著作权登记证书。 （登记号：2014SR052862，证书号：软著登字第0722106号）\n  职务经历与实习 在日本神奈川县横滨市   2020 年 4 月至今\n横滨国立大学大学院工学研究院，非常勤教员（博士后研究）。\n  2019 年 4 月 - 2020 年 3 月\n横滨国立大学理工学部，非常勤讲师（信息系统基础实验课I，II）。\n  2017 年 4 月 - 2017 年 7 月\n横滨国立大学大学院工学府，教学助手（C语言编程实验课I）。\n  在日本埼玉县川越市   2014 年 6 月 - 2015 年 2 月\n株式会社セリア東武霞ヶ関店，兼职。\n  在中国北京市   2012 年 7 月 - 2012 年 9 月\n中软国际，实训。\n  在中国山西省太原市   2013 年 4 月 - 2014 年 3 月\n太原创成焕新科技有限公司，软件及业务管理。\n  2010 年 6 月 - 2010 年 8 月\n太原优联科技有限公司，实习。\n  ",
    "ref": "/zh-cn/about/"
  },{
    "title": "在jetson nano上安装opencv",
    "date": "July 12, 2019",
    "description": "在jetson nano上安装opencv",
    "body": "生成swap文件 为防止编译途中由于内存不足等问题报错， 这里首先提前创建一个swap文件，存放路径任意。 重启后swap空间会消失， 以下编译等全部工作完成后可以手动删除这个文件。\n$ fallocate -l 4G swapfile $ chmod 600 swapfile $ mkswap swapfile $ sudo swapon swapfile $ swapon -s 生成安装脚本 安装opencv 4.0.0版本的脚本原始链接\n以上是安装opencv 4.0.0的版本，在这里我们希望安装较新的4.1.0版本，将上面的代码稍作改动（版本号的部分）：\n#!/bin/bash # # Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved. # # NVIDIA Corporation and its licensors retain all intellectual property # and proprietary rights in and to this software, related documentation # and any modifications thereto. Any use, reproduction, disclosure or # distribution of this software and related documentation without an express # license agreement from NVIDIA Corporation is strictly prohibited. # if [ \u0026#34;$#\u0026#34; -ne 1 ]; then echo \u0026#34;Usage: $0\u0026lt;Install Folder\u0026gt;\u0026#34; exit fi folder=\u0026#34;$1\u0026#34; user=\u0026#34;nvidia\u0026#34; passwd=\u0026#34;nvidia\u0026#34; echo \u0026#34;** Install requirement\u0026#34; sudo apt-get update sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev sudo apt-get install -y python2.7-dev python3.6-dev python-dev python-numpy python3-numpy sudo apt-get install -y libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev sudo apt-get install -y libv4l-dev v4l-utils qv4l2 v4l2ucp sudo apt-get install -y curl sudo apt-get update echo \u0026#34;** Download opencv-4.1.0\u0026#34; cd $folder curl -L https://github.com/opencv/opencv/archive/4.1.0.zip -o opencv-4.1.0.zip curl -L https://github.com/opencv/opencv_contrib/archive/4.1.0.zip -o opencv_contrib-4.1.0.zip unzip opencv-4.1.0.zip unzip opencv_contrib-4.1.0.zip cd opencv-4.1.0/ echo \u0026#34;** Building...\u0026#34; mkdir release cd release/ cmake -D WITH_CUDA=ON -D CUDA_ARCH_BIN=\u0026#34;5.3\u0026#34; -D CUDA_ARCH_PTX=\u0026#34;\u0026#34; -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.0/modules -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python2=ON -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. make -j3 sudo make install sudo apt-get install -y python-opencv python3-opencv echo \u0026#34;** Install opencv-4.1.0 successfully\u0026#34; echo \u0026#34;** Bye :)\u0026#34; 将上面的脚本保存为sh文件，例如install_opencv4.1.0_Nano.sh。\n运行脚本 mkdir opencv sh install_opencv4.1.0_Nano.sh opencv 安装会比较花时间，耐心等待安装结束，建议使用tmux等挂在后台执行。\n测试安装好的opencv 通过python的交互界面测试语句import cv2，不报错则安装完成。\n不过，考虑到使用pyenv等工具进行python版本管理的用户， 此时如果切换到pyenv下安装的python版本可能无法检测到已安装的OpenCV， 作为解决版本是创建一个OpenCV库的软链接到pyenv中python版本的库目录下。\n假设你的pyenv中的python版本的库目录为 /home/xin/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages， 安装好的OpenCV库路径为 /usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so， 那么执行下面的语句即可创建软链接。\ncd /home/xin/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages ln -s /usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so ./ 另外提前使用pyenv中的python版本的pip通过 pip install numpy语句安装好numpy， 去交互界面测试import cv2无错误显示则安装完成。\n",
    "ref": "/zh-cn/blog/environment/install-opencv-on-jetson-nano/"
  },{
    "title": "安装gnutls并从源码编译emacs",
    "date": "May 4, 2019",
    "description": "安装gnutls并从源码编译emacs",
    "body": "若当前环境没有gnutls， 那么在使用emacs源代码进行编译安装前的配置 （./configure）时可以临时使用--with-gnutls=no选项， 以使编译安装能够顺利进行。 例如下面的配置：\nbash configure --prefix=$HOME/.local --with-gif=no --with-gnutls=no 上面的例子虽然可以正常安装emacs到$HOME/.local目录， 但缺少了gnutls的支持， emacs内就只能使用http协议而并不能使用https协议， 虽然在emacs初始化时可以将melpa的链接都改为http协议解决问题， 但如果后期使用google-translate之类的包时还是会遇到问题。\n例如即使在elpa下将google-translate包内的所有.el 文件中出现的https改为http， 中途还是会出现自动使用某些https服务的情况，从而导致翻译异常。 （这里需要注意，修改后需删除所有.elc文件以强制重新编译使修改生效）\n上面问题的解决办法很简单，只需在当前环境安装gnutls即可。\n以OpenSUSE为例，在终端下运行下面的语句即可完成安装。\nsudo zypper install gnutls 另外，在安装emacs时，如果make后报以下错误，\nchecking for library containing tputs... no configure: error: The required function \u0026#39;tputs\u0026#39; was not found in any library. The following libraries were tried (in order): libtinfo, libncurses, libterminfo, libcurses, libtermcap Please try installing whichever of these libraries is most appropriate for your system, together with its header files. For example, a libncurses-dev(el) or similar package. make: *** No targets specified and no makefile found. Stop. make: *** No rule to make target \u0026#39;install\u0026#39;. Stop. 那么对于OpenSUSE的环境可能需要ncurses-devel的包， 执行下面的语句安装即可。\nsudo zypper install ncurses-devel ",
    "ref": "/zh-cn/blog/environment/install-gnutls-and-compile-emacs-from-source/"
  },{
    "title": "我的shell迁移记录",
    "date": "May 3, 2019",
    "description": "从bash到zsh再到fish",
    "body": "从bash到zsh 虽然我使用zsh shell两周后就换到fish shell了（关于fish shell下面有专门介绍）， 但这并不否认zsh shell仍然是个很好的shell。 你可以通过下面的方式从任意的shell切换至zsh shell。\n 安装zsh时通过下面的指令：  brew install zsh (MacOS) apt install zsh (Ubuntu / Linux Mint)  如果你想要知道现在系统裡已经安装好的shell，输入下面的指令：  cat /etc/shells  如何将zsh作为你默认的shell呢？，输入下面的指令：  chsh -s /usr/local/bin/zsh  关于配置文件的读取错误  shell脚本解释出错时可以查看一下当前所使用的sh路径， 比如有可能是sh指向了dash导致出错。 通过下面的语句查看。\nls -l `which sh`  脚本解释器在语法上的不同点  从传统的bash等shell换到zsh时会发现集合的第一个元素的索引是从1开始的， 如果希望从0开始，在配置文件中配置下面语句即可。\n Fix array index for zsh:  if [ \u0026#34;$ZSH_NAME\u0026#34; = \u0026#34;zsh\u0026#34; ];then setopt localoptions ksharrays fi 配置zsh shell 与bash shell的.bashrc类似，zsh的配置也需要一个配置文件， 这个文件是在用户目录下的.zshrc文件，点击 这里 打开我上传到Github的配置文件下载使用。\n从zsh到fish 使用zsh shell之后大概两週我就换到fish shell了， 这不是因为zsh不好，而是fish天然的完成度和易用性吸引了我， 转移到fish环境后，有关shell折腾算是告一段落，以下对该过程纪录。\nfish shell的安装以及默认shell的切换 这个上面提到过，这裡具体针对不同的操作系统所需要执行的指令进行介绍。\n MacOS:  brew install fish  Ubuntu/Linux Mint:  apt install fish  OpenSUSE:  sudo zypper install fish 如果需要root权限，例如你是运行在Windows下的OpenSUSE环境， 则默认需要root权限，则前面加sudo。 通过下面的语句查看当前系统所使用的shell：\ncat /etc/shells 如果显示你的fish shell在/usr/bin/fish， 那麽执行下面的语句切换其为默认shell（权限不足则补充sudo）：\nchsh -s /usr/bin/fish 现在重新打开一个终端会话会发现默认shell已经切换到fish了。 如果打开fish shell后马上报很多关于hostname的错， 也就是说当前环境缺少一个叫做hostname的包， 那麽使用你所使用的发行版的包管理器安装hostname， 例如在OpenSUSE下使用：\nsudo zypper install hostname fish的配置 我写好的配置上传在了Github，点击 这里 查看我的配置。\n在fish shell下使用python时的常见问题 目前我遇到的比较需要注意的问题有下面两点：\n 关于tmux  tmux在后台存在session的时候， 即使更新PYTHONPATH环境变量也不会生效， 此时需要关闭tmux的所有进程，更新才会生效。 除fish以外其他shell环境应该也会遇到， 我是在fish首次出现，留作纪录。\n 关于PYTHONPATH  fish shell中定义环境变量的方式为set \u0026lt;variable_name\u0026gt; \u0026lt;parameter_1\u0026gt; \u0026lt;parameter_2\u0026gt; 这种方式有很大的优越性而且非常方便， 然而对于PYTHONPATH， 则set PYTHONPATH \u0026lt;parameter_1\u0026gt;:\u0026lt;parameter_2\u0026gt;的方式更具有通用性。 原因为，经过测试在MacOS下两种方式均可正常使用， 但在运行在Jetson Nano上的Ubuntu下测试时，只有第二种方式可用。 具体原因尚未明确，有可能时操作系统不同的原因， 也可能是python版本不同造成的 （比如版本号相同，但处理器架构不同造成了编译方式的差异导致该问题）。\n",
    "ref": "/zh-cn/blog/environment/my-shell-migration-record/"
  },{
    "title": "使用usb设备安装linux mint",
    "date": "April 23, 2019",
    "description": "使用usb设备安装linux mint",
    "body": "重要：在开始下面的工作之前，首先确保U盘没有存任何东西， 或者里面没有放任何的重要数据（因为烧录会导致数据丢失）， 同时电脑上已经准备好空的分区（安装到的目标分区的数据也会被抹掉）。\n准备一个用于安装linux mint的usb设备 首先准备一个usb设备，可以是u盘也可以是usb的移动硬盘， 之后会在这个上面写入供安装linux mint的安装程序。\n 如果使用的是windows操作系统，那么点击 这里 来查看ubuntu官方的教程以创建一个可以安装Linux的USB设备。  注意：上面的教程是教你如何製作一个用于安装Ubuntu的USB设备， 安装linux mint的情况下仅需要把涉及到iso文件的地方换成Linux Mint的iso文件，其他地方完全相同。\n 其中会用到的软件叫做rufus，上面的教程裡面也有提到，点击 这里 打开rufus的官方网站，你也可以点击 这里 直接下载rufus。  linux mint的iso文件 前一节提到的linux mint的iso文件需要从下面的地方获取。点击 这里 打开linux mint的官方网站。 或者也可以点击 这里 直接下载Linux Mint 19.1版本。\n",
    "ref": "/zh-cn/blog/installation/install-linux-mint-from-the-usb-device/"
  },{
    "title": "通过jekyll创建博客并发布到github",
    "date": "April 2, 2019",
    "description": "通过jekyll创建博客并发布到github",
    "body": "The logo of Jekyll1目录  安装Jekyll 发布到Github  安装Jekyll Jekyll是一个基于Ruby语言的静态网站生成工具，下面引用官网介绍。\n Jekyll is a static site generator. You give it text written in your favorite markup language and it uses layouts to create a static website. You can tweak how you want the site URLs to look, what data gets displayed on the site, and more. \u0026ndash;Jekyll2 那么安装Jekyll之前首先需要一个Ruby的编程环境， 这里首先需要准备好Ruby的包管理器gem， 然后只需要在终端执行gem install jekyll就可以安装Jekyll了。\n发布到Github 安装好Jekyll之后，在你的工作目录下执行jekyll new \u0026lt;Your website folder name\u0026gt;， 即可生成一个测试网站。\n接下来在Github上创建一个叫做\u0026lt;Your username\u0026gt;.github.io的仓库（repository）， 然后通过git push指令把你的网站push到建立好的仓库就可以了。 几分钟后打开\u0026lt;Your username\u0026gt;.github.io应该可以看到页面。\n我的这个博客的个人主页就是通过以上方式创建，欢迎参考并留言。\n本站已转移为通过hugo建立，2020年6月14日追记。 如有需要请点击这里访问旧站，欢迎留言。\n  The logo of Jekyll \u0026#x21a9;\u0026#xfe0e;\n jekyllrb.com \u0026#x21a9;\u0026#xfe0e;\n   ",
    "ref": "/zh-cn/blog/cms/create-a-blog-by-jekyll-and-publish-to-github/"
  },{
    "title": "联系我",
    "date": "January 1, 0001",
    "description": "",
    "body": "",
    "ref": "/zh-cn/contact/"
  }]
