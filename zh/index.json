[{"authors":["xin"],"categories":null,"content":" 主要研究方向为机器学习、深度学习与人工智能在各个领域的应用，特长为针对非均匀数据及偏移数据的优先采样及学习算法。 ","date":1583020800,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":1583020800,"objectID":"addc4885726ec1c1a1451bb0c5466034","permalink":"https://xinii.cf/zh/author/xin-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/author/xin-li/","section":"authors","summary":"主要研究方向为机器学习、深度学习与人工智能在各个领域的应用，","tags":null,"title":"Xin Li","type":"authors"},{"authors":null,"categories":["Configuration tool"],"content":"","date":1593475200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1593475200,"objectID":"9d218bb02591dc362b63b96839feb951","permalink":"https://xinii.cf/zh/project/xinconfig/","publishdate":"2020-06-30T00:00:00Z","relpermalink":"/zh/project/xinconfig/","section":"project","summary":"Emacs, bash, fish shell, tmux, anyenv, ..., configure anything with xinconfig","tags":["Emacs","Bash","Fish shell","Script"],"title":"A reasonable configuration tool for your unified working environment","type":"project"},{"authors":null,"categories":["Windows"],"content":"  目录  有关日语键盘布局的注册表设置  关于键盘扫描码  键盘扫描码的例子1  在注册表中进行键盘扫描码映射    更改键盘布局类型  中文输入法的英文布局改为日语键盘布局  其他语言的输入法的键盘布局更改    当资源管理器的「我的电脑」或「PC」中出现未知图标时的注册表设置  无法连接到本地网络上的 NAS 时的注册表设置2  参考资料    有关日语键盘布局的注册表设置  关于键盘扫描码   首先，键盘扫描码是什么呢？让我们看看维基百科上的定义。   键盘扫描码（英語：scancode 或 scan code）是绝大多数电脑键盘向计算机发送的一项数据， 用以报告哪些键被按下。它使用一个数字或数字序列来表示分配到键盘上的每个按键。 - Wikipedia  键盘扫描码的例子1     Key Code     RCtrl 1D E0   LAlt 38 00   RAlt 38 E0   ESC 01 00   Insert 52 E0   Enter 1C 00   Caps 3A 00   Space 39 00   日语键盘无变换键 7B 00   日语键盘变换键 79 00    在注册表中进行键盘扫描码映射     首先，按 Windows 徽标键 + R ，输入 regedit 后然后按 Enter 键打开 Windows 注册表编辑器。 然后在注册表编辑器中打开以下位置。 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout     接下来，右击空白处，按照「新建 - 二进制值(B) - Scancode Map」的顺序创建一个叫做「Scancode Map」的二进制 Key，双击即可编辑。 关于「Scancode Map」的值（也就是映射的规则），以我的设定为例下面列出表格供参考。 这里，「版本」，「标记」和「终端空值」的部分需保留原样。 另外，关于「映射数」的部分，需要设定为映射规则的数量和「终端空值」的数量之和。    我所使用的 Logicool K380 键盘（日语布局）映射关系    Index Scancode 映射关系 Scancode 映射关系     0000 00 00 00 00 版本 00 00 00 00 标记   0008 08 00 00 00 映射数 1D 00 3A 00 LCtrl \u0026lt;- Caps   0010 3A 00 1D 00 Caps \u0026lt;- LCtrl 1D E0 38 00 RCtrl \u0026lt;- LAlt   0018 38 00 7B 00 LAlt \u0026lt;- 无变换键 38 E0 70 00 RAlt \u0026lt;- 假名键   0020 39 00 79 00 Space \u0026lt;- 变换键 01 00 38 E0 ESC \u0026lt;- RAlt   0028 00 00 00 00 终端空值         我所使用的 FILCO Majestouch MINILA Air 键盘（日语布局）的映射关系    Index Scancode 映射关系 Scancode 映射关系     0000 00 00 00 00 版本 00 00 00 00 标记   0008 0B 00 00 00 映射数 1C 00 52 E0 Enter \u0026lt;- Insert   0010 1D E0 38 00 RCtrl \u0026lt;- LAlt 1D E0 70 00 RCtrl \u0026lt;- Kana   0018 7B 00 46 00 变换 \u0026lt;- ScrLk 79 00 1D E1 变换键 \u0026lt;- Pause   0020 00 00 45 00 Null \u0026lt;- NumLock 00 00 9D E1 Null \u0026lt;- Break   0028 38 00 7B 00 LAlt \u0026lt;- 无变换 01 00 79 00 ESC \u0026lt;- 变换键   0030 52 E0 29 00 Insert \u0026lt;- 半/全 00 00 00 00 终端空值       在这里需要注意，「Pause/Break」键并非单一扫描码构成， 「NumLock」的扫描码也在其中，在设定时需根据情况灵活设定。 可以参考下面的描述。   Pause 0xE1:0x1D:0x45 [ 84key Ctrl (0x1D) + NumLock (0x45)], no auto repeat, break code 0xE1:0x9D:0xC5 - Keyboard Scancode Map    更改键盘布局类型  中文输入法的英文布局改为日语键盘布局     首先，打开注册表的下面位置。 HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Keyboard Layouts\\00000804     然后做以下调整。    Key 变更前 变更后     Layout File KBDUS.DLL KBD106.DLL      其他语言的输入法的键盘布局更改     其他的语言的情况下，只需变更注册表路径的 00000804 的地方到对应的语言的输入法， 然后改变 ***.DLL 的部分到对应语言的动态链接库文件的名称即可。   当资源管理器的「我的电脑」或「PC」中出现未知图标时的注册表设置     通过定位到下面的注册表路径，找到位置图标对应的项删除即可。 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer\\NameSpace    无法连接到本地网络上的 NAS 时的注册表设置2     首先打开以下注册表位置 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters     然后进行下面的变更    Key 变更前 变更后     AllowInsecureGuestAuth 0 1      参考资料     将 Insert 无效化的方法（原文为日语）    通过 Scancode Map 改变键的分配（原文为日语）    Homegroup removed! How to get network sharing work with Windows 10 v1803   1  键盘扫描码一览表（原文为日语）   2  无法连接 NAS！原来原因并不是 SMB1.0！（原文为日语）     ","date":1591228800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591228800,"objectID":"ded587e70c48694d473ab2cd2848c700","permalink":"https://xinii.cf/zh/post/several-windows-registry-configurations/","publishdate":"2020-06-04T00:00:00Z","relpermalink":"/zh/post/several-windows-registry-configurations/","section":"post","summary":"希望实现一些仅通过 Windows 的系统设置无法实现的功能，但也不希望使用第三方软件？来试试修改注册表吧！","tags":["Registry","Scancode","Keyboard layout"],"title":"一些可帮助你更有效地工作的 Windows 注册表设置","type":"post"},{"authors":null,"categories":["Windows"],"content":"  目录  激活 Windows 10  安装一些有用的工具  配置msys2    激活 Windows 10   打开 cmd ，输入下面语句。 slmgr -ipk {your product key} slmgr -skms {kms server address of your company} slmgr -ato  安装一些有用的工具     Msys2    AutoHotKey    Ricty   配置msys2  pacman -S git fish tmux emacs gcc python cd ~ git clone https://github.com/xinii/xinconfig .xinconfig cd .xinconfig ./setenv fish exec fish set_conf tmux set_el auto set_el cn change_emacs xin emacs ssh-keygen -A emacs /etc/ssh/sshd_config #Port **** #PasswordAuthentication no cat {path to your pub key} \u0026gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh /usr/bin/sshd  ","date":1591228800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591228800,"objectID":"05b2164c449901d188d13ac057a28036","permalink":"https://xinii.cf/zh/post/some-installations-for-windows-10/","publishdate":"2020-06-04T00:00:00Z","relpermalink":"/zh/post/some-installations-for-windows-10/","section":"post","summary":"重装 Windows 10 之后下面的几个工具我是必须安装的，这使我能更有效率地工作。要不要试试呢？","tags":["Activation","MSYS2","AutoHotkey","Ricty"],"title":"重装 Windows 10 后的一些工作","type":"post"},{"authors":null,"categories":["Linux"],"content":"  目录  将要使用的命令  没这个命令？先试试这个  安装过程  注册仓库  刷新仓库  安装      将要使用的命令  add-apt-repository  没这个命令？先试试这个  apt install software-properties-common  安装过程  注册仓库  add-apt-repository ppa:kelleyk/emacs apt-add-repository ppa:fish-shell/release-3  刷新仓库  apt update  安装  apt install emacs26 apt install fish  ","date":1591142400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591142400,"objectID":"5c04cf7203f3d0ee36c4c4007d45d585","permalink":"https://xinii.cf/zh/post/add-apt-repository-for-fish-and-emacs/","publishdate":"2020-06-03T00:00:00Z","relpermalink":"/zh/post/add-apt-repository-for-fish-and-emacs/","section":"post","summary":"想安装 Emacs26 或 Fish 3.0 却发现 apt 提示已经安装最新版本？来试试本文的方法吧！","tags":["apt","Fish shell","Emacs"],"title":"为 Fish 和 Emacs 添加 apt 仓库","type":"post"},{"authors":null,"categories":["SSH"],"content":"  目录  ssh 连接中断的现象  解决方法  One more thing    通过 Termux 应用开启安卓 SSH 服务  安装  设置密钥文件  在调试模式下启动服务  启动服务  在电脑端登录设置好的服务      ssh 连接中断的现象     当通过 ssh 进行远程登录的时候，如果长时间没有操作，则会出现 Write failed: Broken pipe 的错误提示并连接中断。    这是因为在一定时间内没有数据交换的情况下 ssh 连接默认会自动断开。要解决这个问题需要从客户端或者服务器端来改变设置。 解决方法     从客户端解决    将下面的内容配置在 /etc/ssh/ssh_config 或 ~/.ssh/config 中。 ServerAliveInterval 15 ServerAliveCountMax 10   通过以上的设定，每 15 秒会进行 10 次应答确认，仍然没有应答的情况下才会断开连接。    从服务器端解决    将下面的内容配置在 /etc/ssh/sshd_config 中。 ClientAliveInterval 30 ClientAliveCountMax 5   通过以上的设定，每 30 秒会进行 5 次应答确认，仍然没有应答的情况下才会断开连接。 One more thing   这里非常推荐使用 tmux 或者 screen 之类的工具， 这样即使丢失连接，也可以在重新连接服务器后快速通过挂载原先的会话的方式迅速恢复工作环境。 通过 Termux 应用开启安卓 SSH 服务  安装  apt install openssh  设置密钥文件  ssh-keygen cat ~/.ssh/id_rsa.pub \u0026gt; ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys chmod 700 ~/.ssh  在调试模式下启动服务  sshd -d  启动服务  sshd  在电脑端登录设置好的服务   将在安卓端取得的私有密钥 ~/.ssh/id_rsa 配置到电脑端的 ssh 客户端， 然后通过空用户名连接安卓端的 ip 地址及端口号 8022 即可。 ","date":1591142400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591142400,"objectID":"09b144bbaa80955005ddd230644e63a4","permalink":"https://xinii.cf/zh/post/several-ssh-configurations/","publishdate":"2020-06-03T00:00:00Z","relpermalink":"/zh/post/several-ssh-configurations/","section":"post","summary":"很头痛 SSH 中途断掉连接的事情吗？想要在安卓平台上通过 Termux 应用创建 SSH 服务？来看看这篇文件的内容吧。","tags":["Termux","Android","Daemon","Keygen"],"title":"几个有关 SSH 的配置","type":"post"},{"authors":["Xin Li","Hiroshi Arai","Tomoki Hamagami"],"categories":["Journal article"],"content":"  Click the Cite button above to copy or download the publication metadata.   ","date":1583020800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1583020800,"objectID":"2bd6007a4df432d74c96a1f872b6e761","permalink":"https://xinii.cf/zh/publication/li2020wave/","publishdate":"2020-03-01T00:00:00Z","relpermalink":"/zh/publication/li2020wave/","section":"publication","summary":"A method for the estimation of wave-making resistance from the hull form and Froude number through deep learning is proposed. At the same time, this research also gives a solution when the data are skewed, which solves the problem of low generalization performance. The reduction of wave-making resistance is an essential issue in hull form design. However, the estimation of wave-making resistance is a time-consuming task that depends on experimental measurements. To enable direct estimation of the wave resistance from hull form, deep learning, which enables end-to-end learning, is an effective approach. The proposed method has two phases. First, auto-encoders, which reduce the dimension of the offset and the profile data, are generated, while performing to the skewed offset data, use an improved sampling method. Subsequently, after the regularization of these data, a deep neural net for regression estimation of wave-making resistance is generated. The results of evaluation experiments show that the proposed method can estimate wave-making resistance with high precision.","tags":["Deep learning","Auto-encoder","Priority sampling"],"title":"Wave-making resistance estimation through deep learning considering the distribution of ship figure","type":"publication"},{"authors":["Xin Li","Tomoki Hamagami"],"categories":["Conference paper"],"content":"  Click the Cite button above to copy or download the publication metadata.   ","date":1575504000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1575504000,"objectID":"313965cb1129a8aafe5701c0f53e43ad","permalink":"https://xinii.cf/zh/publication/li2019improved/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/zh/publication/li2019improved/","section":"publication","summary":"Auto-encoder as the representative method for data dimensionality reduction and feature extraction, plays a very important role on machine learning. However, the data in the actual research work or industrial production are not always normalized data, at this time, it will lead high reconstruction error and slow convergence speed. This study proposed an improved auto-encoder and a denoising auto-encoder based on 2-level prioritized experience replay, which can improve accuracy and reduce loss, while processing a dimensionality reduction or feature extraction problem on high dimension skewed data. In order to evaluate the effectiveness of the proposed method, three models of high dimension simulation dataset which on different skewed degrees are generated. The results of evaluation experiments show that the proposed method can get lower reconstruction error than conventional method for high dimension skewed simulation data.","tags":["Deep Learning","Auto-encoder","Priority sampling"],"title":"An Improved Auto-encoder Based on 2-Level Prioritized Experience Replay for High Dimension Skewed Data","type":"publication"},{"authors":null,"categories":["OpenCV"],"content":"  目录  生成 swap 文件  生成安装脚本  运行脚本  测试安装好的 OpenCV    生成 swap 文件   为防止编译途中由于内存不足等问题报错， 这里首先提前创建一个swap文件，存放路径任意。 重启后swap空间会消失， 以下编译等全部工作完成后可以手动删除这个文件。 $ fallocate -l 4G swapfile $ chmod 600 swapfile $ mkswap swapfile $ sudo swapon swapfile $ swapon -s  生成安装脚本   安装opencv 4.0.0版本的脚本原始链接  以上是安装opencv 4.0.0的版本，在这里我们希望安装较新的4.1.0版本，将上面的代码中版本号的部分稍作改动。 #!/bin/bash # # Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved. # # NVIDIA Corporation and its licensors retain all intellectual property # and proprietary rights in and to this software, related documentation # and any modifications thereto. Any use, reproduction, disclosure or # distribution of this software and related documentation without an express # license agreement from NVIDIA Corporation is strictly prohibited. # if [ \u0026#34;$#\u0026#34; -ne 1 ]; then echo \u0026#34;Usage: $0\u0026lt;Install Folder\u0026gt;\u0026#34; exit fi folder=\u0026#34;$1\u0026#34; user=\u0026#34;nvidia\u0026#34; passwd=\u0026#34;nvidia\u0026#34; echo \u0026#34;** Install requirement\u0026#34; sudo apt-get update sudo apt-get install -y build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev sudo apt-get install -y python2.7-dev python3.6-dev python-dev python-numpy python3-numpy sudo apt-get install -y libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev sudo apt-get install -y libv4l-dev v4l-utils qv4l2 v4l2ucp sudo apt-get install -y curl sudo apt-get update echo \u0026#34;** Download opencv-4.1.0\u0026#34; cd $folder curl -L https://github.com/opencv/opencv/archive/4.1.0.zip -o opencv-4.1.0.zip curl -L https://github.com/opencv/opencv_contrib/archive/4.1.0.zip -o opencv_contrib-4.1.0.zip unzip opencv-4.1.0.zip unzip opencv_contrib-4.1.0.zip cd opencv-4.1.0/ echo \u0026#34;** Building...\u0026#34; mkdir release cd release/ cmake -D WITH_CUDA=ON -D CUDA_ARCH_BIN=\u0026#34;5.3\u0026#34; -D CUDA_ARCH_PTX=\u0026#34;\u0026#34; -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.1.0/modules -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python2=ON -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. make -j3 sudo make install sudo apt-get install -y python-opencv python3-opencv echo \u0026#34;** Install opencv-4.1.0 successfully\u0026#34; echo \u0026#34;** Bye :)\u0026#34;   将上面的脚本保存为 sh 文件，例如 install_opencv4.1.0_Nano.sh 。 运行脚本  mkdir opencv sh install_opencv4.1.0_Nano.sh opencv   安装会比较花时间，耐心等待安装结束，建议使用tmux等挂在后台执行。 测试安装好的 OpenCV   通过 Python 的交互界面测试语句 import cv2 ，不报错则安装完成。  不过，考虑到使用 Pyenv 等工具进行 Python 版本管理的用户， 此时如果切换到pyenv下安装的 Python 版本可能无法检测到已安装的 OpenCV， 作为解决版本是创建一个 OpenCV 库的软链接到pyenv中python版本的库目录下。  假设 Pyenv 下已安装的 Python 版本对应的库文件目录如下。 /home/{username}/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages   安装完成的 OpenCV 的库文件路径如下。 /usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so   执行下面的语句即可创建软链接。 cd /home/{username}/.anyenv/envs/pyenv/versions/3.6.8/lib/python3.6/site-packages ln -s /usr/local/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so ./   另外提前使用 Pyenv 下的 Python 版本对应的 pip 工具执行 pip install numpy 语句安装好 Numpy， 去交互界面测试 import cv2 后如无错误显示则安装完成。 ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1562889600,"objectID":"1f4a76eeab4fb4292a9a1961d0b4b7b1","permalink":"https://xinii.cf/zh/post/install-opencv-on-jetson-nano/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/zh/post/install-opencv-on-jetson-nano/","section":"post","summary":"与非 arm 架构的 linux 相比，在 Jetson Nano 上安装 OpenCV 时可能需要稍加配置，本文将记录我此前的安装过程","tags":["Jetson Nano","Python"],"title":"在 Jetson Nano 上安装 OpenCV","type":"post"},{"authors":null,"categories":["Emacs"],"content":"  目录  环境中缺少GnuTLS的情况  潜在的问题  安装GnuTLS  其他可能的问题    环境中缺少GnuTLS的情况   若当前环境缺少 GnuTLS，那么在对 Emacs1 的源代码进行编译安装前需要以下配置。 ./configure --with-gnutls=no   或者同时指定安装目录、添加忽略其他仍缺少的依赖库的选项等，例如以下配置。 bash configure --prefix=$HOME/.local --with-gif=no --with-gnutls=no   这样可以在缺少对默认安装路径权限，或者缺少各种依赖库的情况下使配置及安装得以顺利进行。 潜在的问题   以上虽可以达到正常安装 Emacs 到 $HOME/.local 目录的目的， 但由于缺少了 GnuTLS 组件，Emacs 中用到网络传输的时候便只能使用 http 而不能使用 https。  如果只是 Emacs 初始化时需要网络连接，还可以通过将 Melpa 的链接都改为以 http 开头来解决问题， 但这为今后使用 Emacs 中需要网络连接的各种扩展带来问题。  例如使用 google-translate 时，即使将 Emacs 配置文件夹中 elpa 文件夹下的 google-translate 包内的所有 *.el 文件中出现的 https 改为 http ， 在实际使用的途中仍会出现自动使用某些 https 服务的情况，从而导致翻译异常。  这里有一点需要注意的是，修改 *.el 文件后需删除所有 *.elc 文件以强制重新编译使修改生效。 安装GnuTLS   经过以上实际测试我们不难发现，在当前环境中安装好 GnuTLS 之后再从源码安装 Emacs 是一个不错的选择。  以 OpenSUSE 为例，在终端运行下面的语句即可安装 GnuTLS。 sudo zypper install gnutls  其他可能的问题  checking for library containing tputs... no configure: error: The required function \u0026#39;tputs\u0026#39; was not found in any library. The following libraries were tried (in order): libtinfo, libncurses, libterminfo, libcurses, libtermcap Please try installing whichever of these libraries is most appropriate for your system, together with its header files. For example, a libncurses-dev(el) or similar package. make: *** No targets specified and no makefile found. Stop. make: *** No rule to make target \u0026#39;install\u0026#39;. Stop.   另外，如果 GnuTLS 在当前环境已安装，而 make 后仍报上面的错误， 那么对于 OpenSUSE 的环境则需要一个叫做 ncurses-devel 的包， 执行下面的语句安装即可。 sudo zypper install ncurses-devel  1  Emacs 的 Logo     ","date":1556928000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1556928000,"objectID":"eb22f873273a534327f7e7a79c9e5128","permalink":"https://xinii.cf/zh/post/install-gnutls-and-compile-emacs-from-source/","publishdate":"2019-05-04T00:00:00Z","relpermalink":"/zh/post/install-gnutls-and-compile-emacs-from-source/","section":"post","summary":"从源码编译 Emacs 时出现有关 GnuTLS 的错误？让我我们来具体看看是怎么回事吧！","tags":["GnuTLS","Compile"],"title":"安装 GnuTLS 并从源码编译 Emacs","type":"post"},{"authors":null,"categories":["Shell"],"content":"  目录  从bash到zsh  配置 zsh shell    从zsh到fish  fish shell的安装以及默认shell的切换  Fish shell 的配置  在fish shell下使用python时的常见问题      从bash到zsh   虽然我使用zsh shell两周后就换到fish shell了（关于fish shell下面有专门介绍）， 但这并不否认zsh shell仍然是个很好的shell。 你可以通过下面的方式从任意的shell切换至zsh shell。    安装zsh时通过下面的指令：   brew install zsh (MacOS) apt install zsh (Ubuntu / Linux Mint)     如果你想要知道现在系统裡已经安装好的shell，输入下面的指令：   cat /etc/shells     如何将zsh作为你默认的shell呢？，输入下面的指令：   chsh -s /usr/local/bin/zsh     关于配置文件的读取错误    Shell 脚本解释出错时可以查看一下当前所使用的 sh 路径， 比如有可能是 sh 指向了 dash 导致出错。 通过下面的语句查看。 ls -l `which sh`     脚本解释器在语法上的不同点    从传统的 bash 等 shell 换到 zsh 时会发现集合的第一个元素的索引是从 1 开始的， 如果希望从 0 开始，在配置文件中配置下面语句即可。    Fix array index for zsh:   if [ \u0026#34;$ZSH_NAME\u0026#34; = \u0026#34;zsh\u0026#34; ];then setopt localoptions ksharrays fi  配置 zsh shell   与 bash 的 .bashrc 类似， zsh 的配置也需要一个配置文件， 这个文件是在用户目录下的 .zshrc 文件， 如果你不想自己写配置，点击这里打开我上传到 Github 的配置文件下载使用。 从zsh到fish   使用zsh shell之后大概两週我就换到fish shell了， 这不是因为zsh不好，而是fish天然的完成度和易用性吸引了我， 转移到fish环境后，有关shell折腾算是告一段落，以下对该过程纪录。 fish shell的安装以及默认shell的切换   这个上面提到过，这里具体针对不同的操作系统所需要执行的指令进行介绍。    MacOS:   brew install fish     Ubuntu/Linux Mint:   apt install fish     OpenSUSE:   sudo zypper install fish   如果是运行在 Windows 下的 OpenSUSE 环境， 则可能需要 root 权限，这时在命令前面加上 sudo 。 通过下面的语句查看当前系统所使用的 Shell。 cat /etc/shells   如果显示你的fish shell在 /usr/bin/fish ， 那么执行下面的语句切换其为默认shell（权限不足则补充 sudo ）： chsh -s /usr/bin/fish   现在重新打开一个终端会话会发现默认 Shell 已经切换到 Fish shell 了。 如果打开 Fish shell 后马上报很多关于 hostname 的错误， 说明当前环境缺少一个叫做 hostname 的包， 那么使用当前 Linux 发行版的包管理器安装 hostname ， 例如在 OpenSUSE 下使用： sudo zypper install hostname  Fish shell 的配置   我写好的配置上传在了Github，点击这里查看我的配置。 在fish shell下使用python时的常见问题   目前我遇到的比较需要注意的问题有下面两点：    关于 tmux    tmux在后台存在session的时候， 即使更新=PYTHONPATH=环境变量也不会生效， 此时需要关闭tmux的所有进程，更新才会生效。 除fish以外其他shell环境应该也会遇到， 我是在fish首次出现，留作纪录。    关于 PYTHONPATH    Fish shell 中定义环境变量的方式为 set \u0026lt;variable_name\u0026gt; \u0026lt;parameter_1\u0026gt; \u0026lt;parameter_2\u0026gt; 这种方式有很大的优越性而且非常方便， 然而对于 PYTHONPATH ， 则 set PYTHONPATH \u0026lt;parameter_1\u0026gt;:\u0026lt;parameter_2\u0026gt; 的方式更具有通用性。 原因为，经过测试在 MacOS 下两种方式均可正常使用， 但在运行在 Jetson Nano 上的 Ubuntu 下测试时，只有第二种方式可用。 具体原因尚未明确，有可能时操作系统不同的原因， 也可能是 Python 版本不同造成的 （比如版本号相同，但处理器架构不同造成了编译方式的差异导致该问题）。 ","date":1556841600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1556841600,"objectID":"1f84eaa4996f8152bfb64399cb2449ef","permalink":"https://xinii.cf/zh/post/my-shell-migration-record/","publishdate":"2019-05-03T00:00:00Z","relpermalink":"/zh/post/my-shell-migration-record/","section":"post","summary":"bash - zsh - fish","tags":["Bash","Z shell","Fish shell","tmux"],"title":"我的 Shell 迁移记录","type":"post"},{"authors":null,"categories":["Linux"],"content":"  目录  准备一个用于安装 Linux Mint 的 USB 设备  Linux Mint的ISO文件      重要：在开始下面的工作之前，首先确保U盘没有存任何东西， 或者里面没有放任何的重要数据（因为烧录会导致数据丢失）， 同时电脑上已经准备好空的分区（安装到的目标分区的数据也会被抹掉）。   准备一个用于安装 Linux Mint 的 USB 设备   首先准备一个 USB 设备，可以是 U 盘也可以是 USB 的移动硬盘， 之后会在这个上面写入供安装 Linux Mint 的安装程序。    如果使用的是 Windows 操作系统，那么点击 这里来查看 Ubuntu 官方的教程以创建一个可以安装Linux的USB设备。     上面的教程是教你如何制作一个用于安装 Ubuntu 的 USB 设备， 安装 Linux Mint 的情况下仅需要把涉及到镜像文件的地方换成 Linux Mint 的 ISO 文件， 其他地方完全相同。      其中会用到的软件叫做 Rufus，上面的教程裡面也有提到， 点击这里打开 Rufus 的官方网站，或者也可以点击这里直接下载 Rufus。   Linux Mint的ISO文件   前一节提到的 Linux Mint 的 ISO 文件需要从下面的地方获取。 点击这里打开 Linux Mint 的官方网站。或者也可以点击这里直接下载 Linux Mint 19.1 版本。 ","date":1555977600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1555977600,"objectID":"63d05a9c5d56340bdc3c0e109bc5a0ac","permalink":"https://xinii.cf/zh/post/install-linux-mint-from-the-usb-device/","publishdate":"2019-04-23T00:00:00Z","relpermalink":"/zh/post/install-linux-mint-from-the-usb-device/","section":"post","summary":"使用 USB 设备安装 Linux Mint","tags":["Linux Mint","Operating System","USB","Rufus"],"title":"使用 USB 设备安装 Linux Mint","type":"post"},{"authors":null,"categories":["Static site generator"],"content":"  目录  安装 Jekyll  发布博客到 Github    安装 Jekyll   Jekyll 是一个通过 Ruby 语言写的静态网站生成框架，下面是官网介绍。   Jekyll is a static site generator. You give it text written in your favorite markup language and it uses layouts to create a static website. You can tweak how you want the site URLs to look, what data gets displayed on the site, and more. –Jekyll1   安装 Jekyll 时，首先需要一个 Ruby 的包管理环境， Ruby 编程环境的常用包管理器为 gem ， 例如 Ubuntu 中执行下面的语句则会同时安装 gem 。 apt install ruby-dev   安装好 gem 之后，确保它的执行路径在我们的 PATH 环境变量中。 如果不上采用上述方式，而是使用了 rbenv 等虚拟环境管理工具的话， 只要调用虚拟环境下配置好的 gem 就可以了。 随后便可以通过执行下面的语句来安装Jekyll，是不是很简单呢？ gem install jekyll  发布博客到 Github   安装好 Jekyll 之后， 一定是希望先把随便什么内容发布到 Github 上看看效果的哈， 特别能理解这种心情。  那么接下来，在实际写博客之前， 我们首先用安装好的 Jekyll 生成一个默认站点并将其发布到 Github。 在希望在本地管理博客的路径下执行下面的语句。 jekyll new folder-name-for-your-blog   随后在当前路径下会生成一个叫做 folder-name-for-your-blog 的文件夹， 这里面便是 Jekyll 新建的博客源码。  然后在 Github 上创建一个叫做 your-user-name-of-github.github.io 的仓库。 创建好新的仓库后，Github 会提示如何通过 git 来 push 本地内容到该仓库。 按着所提示的向导将刚创建好的 folder-name-for-your-blog 的内容 push 到这个仓库。  随后等几分钟通过浏览器打开 your-user-name-of-github.github.io ， 不出意外的话即可看到 Jekyll 的欢迎页面。  本站也是通过以上方式创建。  （2020年6月14日追记）  本站现已改用 hugo 静态网站生成框架创建， 如需参考原来的站点，请点击这里访问。  欢迎联络并留言。 1  Jekyll 官方网站     ","date":1554163200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1554163200,"objectID":"21815f0de4793747e4dee1b6e94ecd29","permalink":"https://xinii.cf/zh/post/create-a-blog-by-jekyll-and-publish-to-github/","publishdate":"2019-04-02T00:00:00Z","relpermalink":"/zh/post/create-a-blog-by-jekyll-and-publish-to-github/","section":"post","summary":"希望拥有一个自己的博客但不知如何创建？试试 Github 原生支持的 Jekyll 吧！","tags":["Jekyll","Github","Blog"],"title":"通过 Jekyll 创建博客并发布到 Github","type":"post"},{"authors":["Jinwei Wang","Xin Li"],"categories":["Book section"],"content":"","date":1541030400,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1541030400,"objectID":"7d3c244ae321f3c0db5dc552267255c4","permalink":"https://xinii.cf/zh/publication/wang2017/","publishdate":"2018-11-01T00:00:00Z","relpermalink":"/zh/publication/wang2017/","section":"publication","summary":"","tags":["Corpus","Spanish","Don Quixote","Translation"],"title":"《唐吉诃德》一语多译平行语料库构建设想","type":"publication"},{"authors":["Xin Li","Tomoki Hamagami"],"categories":["Conference paper"],"content":"","date":1535760000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1535760000,"objectID":"d83cfe8ca05a7f6649e3186c9a16b3fe","permalink":"https://xinii.cf/zh/publication/li2018prioritized/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/zh/publication/li2018prioritized/","section":"publication","summary":"","tags":["Deep learning","Auto-encoder","Priority sampling"],"title":"Prioritized Sampling Method for Autoencoder to Reduce Loss Rate for Skewed Data","type":"publication"},{"authors":["Xin Li","Masaya Nakata","Hamatsu Fumiya","Tomoki Hamagami"],"categories":["Conference paper"],"content":"","date":1498867200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1498867200,"objectID":"87042482027cb9b485efb7cf88eeeb45","permalink":"https://xinii.cf/zh/publication/li2017research/","publishdate":"2017-07-01T00:00:00Z","relpermalink":"/zh/publication/li2017research/","section":"publication","summary":"","tags":["Time series data","Anomaly detection","Multidimensional data"],"title":"A Research About Anomaly Detection Method for Multidimensional Time Series Data","type":"publication"},{"authors":["Jinwei Wang","Xin Li"],"categories":["Book section"],"content":"","date":1472688000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1472688000,"objectID":"de0f093745f7d3840f37addc80cf88c2","permalink":"https://xinii.cf/zh/publication/wang2016/","publishdate":"2016-09-01T00:00:00Z","relpermalink":"/zh/publication/wang2016/","section":"publication","summary":"","tags":["Language education","Spanish","Oral communication"],"title":"外語專業學生口語交際策略實證研究 - 以西班牙語為例","type":"publication"},{"authors":null,"categories":null,"content":"   现居日本神奈川县横滨市。欢迎来到我的博客，以下是我的个人简历。  教育经历  日本横滨国立大学     2016 年 10 月 - 2020 年 3 月  2016 年 5 月 获国家留学基金管理委员会「国家建设高水平大学公派研究生项目」公派留学资格。  同年 10 月 入学横滨国立大学大学院工学府 博士后期课程 物理信息工程专业， 研究机器学习、深度学习与人工智能应用等领域。  2020 年 3 月 毕业并获 工学博士 学位。   日本东京国际大学     2014 年 4 月 - 2015 年 3 月  2014 年 4 月 以交换留学生身份入学东京国际大学大学院商学研究科 进行经营信息专业博士前期课程的学习，  2015 年 3 月 完成交换留学项目。   中国山西大学     2009 年 9 月 - 2016 年 7 月  2009 年 9 月 入学山西大学本科， 在学期间于计算机与信息技术学院主修软件工程专业、 于经济与管理学院辅修工商管理专业，  2013 年 7 月 毕业并获 工学、管理学学士 学位。  同年 9 月 保送本校硕士研究生， 2016 年 7 月 毕业并获 软件工程专业硕士 学位。   科研及软件著作  期刊及论文出版情况     Xin Li, Hiroshi Arai, and Tomoki Hamagami. Wave-making resistance estimation through deep learning considering the distribution of ship figure. IEEJ Transactions on Electronics, Information and Systems, 140(3):391–397, 2020. （论文正文为日语）    Available on DOI J-STAGE CiNii NDL Online       Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. Proceedings in Adaptation, Learning and Optimization, 12:93–105, 2020. （论文正文为英语）    Available on DOI Springer Link       Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. The papers of technical meeting on systems, IEE Japan, 2018(39):199–203, 2018. （论文正文为英语）    Available on CiNii NDL Online       王 晋炜 and 李 欣. 《唐吉诃德》一语多译平行语料库构建设想. In 西班牙语论丛2017, pages 4250–4423. 外语教学与研究出版社, 北京, 11 2018.    Available on Amazon Kindle Store       王 晋炜 and 李 欣. 外語專業學生口語交際策略實證研究-以西班牙語為例. In 第十一屆海峽兩岸外語教學研討會論文集, pages 1–11. 輔大書坊, 台北, 9 2016. （论文正文为繁体中文）    Available on Google Books      学术会议     Xin Li and Tomoki Hamagami. An improved auto-encoder based on 2-level prioritized experience replay for high dimension skewed data. In Proceedings of the 23rd Asia Pacific Symposium on Intelligent and Evolutionary Systems, 2019.    Xin Li and Tomoki Hamagami. Prioritized sampling method for autoencoder to reduce loss rate for skewed data. In The 28th Fuzzy, Artificial Intelligence, Neural Networks and Computational Intelligence, 2018.    Xin Li, Masaya Nakata, Hamatsu Fumiya, and Tomoki Hamagami. A research about anomaly detection method for multidimensional time series data. In The International Conference on Electrical Engineering, 2017.   软件著作     2014 年 11 月：软件「基于人脸识别和语音识别的眼保健操软件」获国家版权局计算机软件著作权登记证书。 （登记号：2014SR177728，证书号：软著登字第0846964号）    2014 年 9 月：软件「基于词袋模型的图像检索与分类系统」获国家版权局计算机软件著作权登记证书。 （登记号：2014SR136257，证书号：软著登字第0805497号）    2014 年 5 月：软件「基于Android的高清图像生成系统」获国家版权局计算机软件著作权登记证书。 （登记号：2014SR052862，证书号：软著登字第0722106号）   职务经历与实习  在日本神奈川县横滨市     2020 年 4 月至今  横滨国立大学大学院工学研究院，非常勤教员（博士后研究）。    2019 年 4 月 - 2020 年 3 月  横滨国立大学理工学部，非常勤讲师（信息系统基础实验课I，II）。    2017 年 4 月 - 2017 年 7 月  横滨国立大学大学院工学府，教学助手（C语言编程实验课I）。   在日本埼玉县川越市     2014 年 6 月 - 2015 年 2 月  株式会社セリア東武霞ヶ関店，兼职。   在中国北京市     2012 年 7 月 - 2012 年 9 月  中软国际，实训。   在中国山西省太原市     2013 年 4 月 - 2014 年 3 月  太原创成焕新科技有限公司，软件及业务管理。    2010 年 6 月 - 2010 年 8 月  太原优联科技有限公司，实习。   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"93bc95849692d8039207b9333493b424","permalink":"https://xinii.cf/zh/cv/xin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/zh/cv/xin/","section":"cv","summary":"现居日本神奈川县横滨市。欢迎来到我的博客，以下是我的个人简历。","tags":null,"title":"李欣","type":"cv"}]